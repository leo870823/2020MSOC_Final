-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity my_filter_fx6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_out_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data_out_V_ce0 : OUT STD_LOGIC;
    data_out_V_we0 : OUT STD_LOGIC;
    data_out_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_in_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data_in_V_ce0 : OUT STD_LOGIC;
    data_in_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    data_in_V_ce1 : OUT STD_LOGIC;
    data_in_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of my_filter_fx6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_84 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_0_reg_95 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_reg_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln6_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_reg_209 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln6_reg_209_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln6_fu_123_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln12_fu_141_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_reg_218 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_1_fu_149_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_1_reg_223 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_fu_157_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_reg_229 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln180_2_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_2_reg_235 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_y_0_phi_fu_99_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_x_0_phi_fu_110_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_6_fu_197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln8_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_129_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_163_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln180_fu_174_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln9_fu_170_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln180_fu_177_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln215_fu_188_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln215_fu_191_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_117_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_84 <= add_ln6_fu_123_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_84 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    x_0_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_209 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                x_0_reg_106 <= x_reg_229;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_0_reg_106 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    y_0_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_209 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                y_0_reg_95 <= select_ln12_1_reg_223;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_0_reg_95 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln6_reg_209 <= icmp_ln6_fu_117_p2;
                icmp_ln6_reg_209_pp0_iter1_reg <= icmp_ln6_reg_209;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_117_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln12_1_reg_223 <= select_ln12_1_fu_149_p3;
                x_reg_229 <= x_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_117_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln12_reg_218 <= select_ln12_fu_141_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_209 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln180_2_reg_235(15 downto 0) <= zext_ln180_2_fu_183_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln180_2_reg_235(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln6_fu_117_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln6_fu_117_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln6_fu_117_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln180_fu_177_p2 <= std_logic_vector(unsigned(zext_ln180_fu_174_p1) + unsigned(zext_ln9_fu_170_p1));
    add_ln215_fu_191_p2 <= std_logic_vector(unsigned(zext_ln215_fu_188_p1) + unsigned(zext_ln9_fu_170_p1));
    add_ln6_fu_123_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_84) + unsigned(ap_const_lv15_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln6_fu_117_p2)
    begin
        if ((icmp_ln6_fu_117_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_x_0_phi_fu_110_p4_assign_proc : process(x_0_reg_106, icmp_ln6_reg_209, ap_CS_fsm_pp0_stage0, x_reg_229, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln6_reg_209 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_x_0_phi_fu_110_p4 <= x_reg_229;
        else 
            ap_phi_mux_x_0_phi_fu_110_p4 <= x_0_reg_106;
        end if; 
    end process;


    ap_phi_mux_y_0_phi_fu_99_p4_assign_proc : process(y_0_reg_95, icmp_ln6_reg_209, ap_CS_fsm_pp0_stage0, select_ln12_1_reg_223, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln6_reg_209 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_y_0_phi_fu_99_p4 <= select_ln12_1_reg_223;
        else 
            ap_phi_mux_y_0_phi_fu_99_p4 <= y_0_reg_95;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_in_V_address0 <= zext_ln215_6_fu_197_p1(14 - 1 downto 0);
    data_in_V_address1 <= zext_ln180_2_fu_183_p1(14 - 1 downto 0);

    data_in_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_in_V_ce0 <= ap_const_logic_1;
        else 
            data_in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_in_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_in_V_ce1 <= ap_const_logic_1;
        else 
            data_in_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    data_out_V_address0 <= zext_ln180_2_reg_235(14 - 1 downto 0);

    data_out_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_out_V_ce0 <= ap_const_logic_1;
        else 
            data_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_out_V_d0 <= std_logic_vector(unsigned(data_in_V_q0) - unsigned(data_in_V_q1));

    data_out_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln6_reg_209_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln6_reg_209_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            data_out_V_we0 <= ap_const_logic_1;
        else 
            data_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln6_fu_117_p2 <= "1" when (indvar_flatten_reg_84 = ap_const_lv15_4000) else "0";
    icmp_ln8_fu_135_p2 <= "1" when (ap_phi_mux_x_0_phi_fu_110_p4 = ap_const_lv8_80) else "0";
    select_ln12_1_fu_149_p3 <= 
        y_fu_129_p2 when (icmp_ln8_fu_135_p2(0) = '1') else 
        ap_phi_mux_y_0_phi_fu_99_p4;
    select_ln12_fu_141_p3 <= 
        ap_const_lv8_0 when (icmp_ln8_fu_135_p2(0) = '1') else 
        ap_phi_mux_x_0_phi_fu_110_p4;
    tmp_fu_163_p3 <= (select_ln12_1_reg_223 & ap_const_lv7_0);
    x_fu_157_p2 <= std_logic_vector(unsigned(select_ln12_fu_141_p3) + unsigned(ap_const_lv8_1));
    y_fu_129_p2 <= std_logic_vector(unsigned(ap_phi_mux_y_0_phi_fu_99_p4) + unsigned(ap_const_lv8_1));
    zext_ln180_2_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_fu_177_p2),64));
    zext_ln180_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_reg_218),16));
    zext_ln215_6_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_191_p2),64));
    zext_ln215_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_reg_229),16));
    zext_ln9_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_163_p3),16));
end behav;
