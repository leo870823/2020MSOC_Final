-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Relax is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    x_V_ce0 : OUT STD_LOGIC;
    x_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    x_old_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    x_old_V_ce0 : OUT STD_LOGIC;
    x_old_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    x_bar_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    x_bar_V_ce0 : OUT STD_LOGIC;
    x_bar_V_we0 : OUT STD_LOGIC;
    x_bar_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of Relax is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_119 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_0_reg_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_141 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln207_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_490 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln207_reg_490_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_490_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_490_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_490_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_490_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_490_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_490_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_490_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_490_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_490_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln207_fu_161_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln212_1_fu_187_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln212_1_reg_499 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_7_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_7_reg_504 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_7_reg_504_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_7_reg_504_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_7_reg_504_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_7_reg_504_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_7_reg_504_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_7_reg_504_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_7_reg_504_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_7_reg_504_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_7_reg_504_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_7_reg_504_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_223_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_237_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_524 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_assign_reg_534 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_V_fu_247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_V_reg_539 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_V_reg_539_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_31_reg_545 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_31_reg_545_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln331_fu_276_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln331_reg_550 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln331_reg_550_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln326_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln326_reg_556 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln326_reg_556_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_286_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_562 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln330_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_568 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_reg_568_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln332_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln332_reg_573 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln333_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln333_reg_579 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln333_reg_579_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln330_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln330_reg_585 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln332_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln332_reg_591 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln326_fu_421_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln326_reg_596 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln351_fu_483_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln351_reg_601 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_phi_mux_j_0_phi_fu_134_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_152_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln209_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_167_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_195_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln212_fu_179_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln215_fu_207_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln210_fu_203_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln215_fu_211_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_fu_229_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_fu_233_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_s_fu_262_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln310_fu_250_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal exp_V_fu_272_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln318_fu_316_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal sh_amt_24_fu_330_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_82_fu_339_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln329_fu_327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_319_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln334_fu_355_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal lshr_ln334_fu_359_p2 : STD_LOGIC_VECTOR (52 downto 0);
    signal trunc_ln342_fu_335_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln330_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln333_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln334_fu_365_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln332_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln343_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln332_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln343_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln345_fu_369_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln333_fu_389_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln343_fu_413_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_83_fu_428_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln333_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln333_24_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln336_fu_435_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln326_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln333_24_fu_453_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln330_fu_470_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln461_fu_477_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component cross_channel_debibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    cross_channel_debibs_U71 : component cross_channel_debibs
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_152_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_152_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln207_fu_155_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_141 <= i_fu_223_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_141 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln207_fu_155_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_119 <= add_ln207_fu_161_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_119 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    j_0_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln207_reg_490 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_0_reg_130 <= select_ln212_1_reg_499;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_130 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln207_reg_490_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln332_reg_591 <= and_ln332_fu_379_p2;
                select_ln326_reg_596 <= select_ln326_fu_421_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln207_reg_490 <= icmp_ln207_fu_155_p2;
                icmp_ln207_reg_490_pp0_iter1_reg <= icmp_ln207_reg_490;
                    zext_ln215_7_reg_504_pp0_iter1_reg(15 downto 0) <= zext_ln215_7_reg_504(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln207_reg_490_pp0_iter10_reg <= icmp_ln207_reg_490_pp0_iter9_reg;
                icmp_ln207_reg_490_pp0_iter2_reg <= icmp_ln207_reg_490_pp0_iter1_reg;
                icmp_ln207_reg_490_pp0_iter3_reg <= icmp_ln207_reg_490_pp0_iter2_reg;
                icmp_ln207_reg_490_pp0_iter4_reg <= icmp_ln207_reg_490_pp0_iter3_reg;
                icmp_ln207_reg_490_pp0_iter5_reg <= icmp_ln207_reg_490_pp0_iter4_reg;
                icmp_ln207_reg_490_pp0_iter6_reg <= icmp_ln207_reg_490_pp0_iter5_reg;
                icmp_ln207_reg_490_pp0_iter7_reg <= icmp_ln207_reg_490_pp0_iter6_reg;
                icmp_ln207_reg_490_pp0_iter8_reg <= icmp_ln207_reg_490_pp0_iter7_reg;
                icmp_ln207_reg_490_pp0_iter9_reg <= icmp_ln207_reg_490_pp0_iter8_reg;
                icmp_ln326_reg_556_pp0_iter9_reg <= icmp_ln326_reg_556;
                icmp_ln330_reg_568_pp0_iter9_reg <= icmp_ln330_reg_568;
                icmp_ln333_reg_579_pp0_iter9_reg <= icmp_ln333_reg_579;
                p_Result_31_reg_545_pp0_iter9_reg <= p_Result_31_reg_545;
                reg_V_reg_539_pp0_iter9_reg <= reg_V_reg_539;
                trunc_ln331_reg_550_pp0_iter9_reg <= trunc_ln331_reg_550;
                    zext_ln215_7_reg_504_pp0_iter10_reg(15 downto 0) <= zext_ln215_7_reg_504_pp0_iter9_reg(15 downto 0);
                    zext_ln215_7_reg_504_pp0_iter2_reg(15 downto 0) <= zext_ln215_7_reg_504_pp0_iter1_reg(15 downto 0);
                    zext_ln215_7_reg_504_pp0_iter3_reg(15 downto 0) <= zext_ln215_7_reg_504_pp0_iter2_reg(15 downto 0);
                    zext_ln215_7_reg_504_pp0_iter4_reg(15 downto 0) <= zext_ln215_7_reg_504_pp0_iter3_reg(15 downto 0);
                    zext_ln215_7_reg_504_pp0_iter5_reg(15 downto 0) <= zext_ln215_7_reg_504_pp0_iter4_reg(15 downto 0);
                    zext_ln215_7_reg_504_pp0_iter6_reg(15 downto 0) <= zext_ln215_7_reg_504_pp0_iter5_reg(15 downto 0);
                    zext_ln215_7_reg_504_pp0_iter7_reg(15 downto 0) <= zext_ln215_7_reg_504_pp0_iter6_reg(15 downto 0);
                    zext_ln215_7_reg_504_pp0_iter8_reg(15 downto 0) <= zext_ln215_7_reg_504_pp0_iter7_reg(15 downto 0);
                    zext_ln215_7_reg_504_pp0_iter9_reg(15 downto 0) <= zext_ln215_7_reg_504_pp0_iter8_reg(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln207_reg_490_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln326_reg_556 <= icmp_ln326_fu_280_p2;
                icmp_ln330_reg_568 <= icmp_ln330_fu_292_p2;
                icmp_ln332_reg_573 <= icmp_ln332_fu_298_p2;
                icmp_ln333_reg_579 <= icmp_ln333_fu_304_p2;
                or_ln330_reg_585 <= or_ln330_fu_310_p2;
                p_Result_31_reg_545 <= reg_V_fu_247_p1(63 downto 63);
                reg_V_reg_539 <= reg_V_fu_247_p1;
                sh_amt_reg_562 <= sh_amt_fu_286_p2;
                trunc_ln331_reg_550 <= trunc_ln331_fu_276_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln207_reg_490 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ret_V_reg_524 <= ret_V_fu_237_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln207_fu_155_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln212_1_reg_499 <= select_ln212_1_fu_187_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln207_reg_490_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln351_reg_601 <= select_ln351_fu_483_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln207_reg_490_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                val_assign_reg_534 <= grp_fu_152_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln207_fu_155_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln215_7_reg_504(15 downto 0) <= zext_ln215_7_fu_217_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln215_7_reg_504(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln215_7_reg_504_pp0_iter1_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln215_7_reg_504_pp0_iter2_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln215_7_reg_504_pp0_iter3_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln215_7_reg_504_pp0_iter4_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln215_7_reg_504_pp0_iter5_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln215_7_reg_504_pp0_iter6_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln215_7_reg_504_pp0_iter7_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln215_7_reg_504_pp0_iter8_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln215_7_reg_504_pp0_iter9_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln215_7_reg_504_pp0_iter10_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln207_fu_155_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln207_fu_155_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln207_fu_155_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln207_fu_161_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_119) + unsigned(ap_const_lv15_1));
    add_ln215_fu_211_p2 <= std_logic_vector(unsigned(zext_ln215_fu_207_p1) + unsigned(zext_ln210_fu_203_p1));
    and_ln330_fu_465_p2 <= (xor_ln326_fu_460_p2 and icmp_ln330_reg_568_pp0_iter9_reg);
    and_ln332_fu_379_p2 <= (xor_ln330_fu_374_p2 and icmp_ln332_reg_573);
    and_ln333_24_fu_448_p2 <= (xor_ln333_fu_443_p2 and and_ln332_reg_591);
    and_ln333_fu_384_p2 <= (icmp_ln333_reg_579 and and_ln332_fu_379_p2);
    and_ln343_fu_407_p2 <= (xor_ln332_fu_401_p2 and icmp_ln343_fu_349_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln207_fu_155_p2)
    begin
        if ((icmp_ln207_fu_155_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_134_p4_assign_proc : process(j_0_reg_130, icmp_ln207_reg_490, ap_CS_fsm_pp0_stage0, select_ln212_1_reg_499, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln207_reg_490 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_0_phi_fu_134_p4 <= select_ln212_1_reg_499;
        else 
            ap_phi_mux_j_0_phi_fu_134_p4 <= j_0_reg_130;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exp_V_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_262_p4),12));
        grp_fu_152_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_reg_524),32));

    i_fu_223_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(select_ln212_fu_179_p3));
    icmp_ln207_fu_155_p2 <= "1" when (indvar_flatten_reg_119 = ap_const_lv15_4000) else "0";
    icmp_ln209_fu_173_p2 <= "1" when (i_0_reg_141 = ap_const_lv8_80) else "0";
    icmp_ln326_fu_280_p2 <= "1" when (trunc_ln310_fu_250_p1 = ap_const_lv63_0) else "0";
    icmp_ln330_fu_292_p2 <= "1" when (p_Result_s_fu_262_p4 = ap_const_lv11_433) else "0";
    icmp_ln332_fu_298_p2 <= "1" when (signed(sh_amt_fu_286_p2) > signed(ap_const_lv12_0)) else "0";
    icmp_ln333_fu_304_p2 <= "1" when (signed(sh_amt_fu_286_p2) < signed(ap_const_lv12_36)) else "0";
    icmp_ln343_fu_349_p2 <= "1" when (signed(tmp_82_fu_339_p4) < signed(ap_const_lv8_1)) else "0";
    j_fu_167_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_j_0_phi_fu_134_p4));
        lhs_V_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_V_q0),9));

    lshr_ln334_fu_359_p2 <= std_logic_vector(shift_right(unsigned(tmp_35_fu_319_p3),to_integer(unsigned('0' & zext_ln334_fu_355_p1(31-1 downto 0)))));
    or_ln330_fu_310_p2 <= (icmp_ln330_fu_292_p2 or icmp_ln326_fu_280_p2);
    or_ln332_fu_397_p2 <= (or_ln330_reg_585 or icmp_ln332_reg_573);
    p_Result_s_fu_262_p4 <= reg_V_fu_247_p1(62 downto 52);
    reg_V_fu_247_p1 <= val_assign_reg_534;
    ret_V_fu_237_p2 <= std_logic_vector(signed(lhs_V_fu_229_p1) - signed(rhs_V_fu_233_p1));
        rhs_V_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_old_V_q0),9));

    select_ln212_1_fu_187_p3 <= 
        j_fu_167_p2 when (icmp_ln209_fu_173_p2(0) = '1') else 
        ap_phi_mux_j_0_phi_fu_134_p4;
    select_ln212_fu_179_p3 <= 
        ap_const_lv8_0 when (icmp_ln209_fu_173_p2(0) = '1') else 
        i_0_reg_141;
    select_ln326_fu_421_p3 <= 
        ap_const_lv8_0 when (icmp_ln326_reg_556(0) = '1') else 
        select_ln343_fu_413_p3;
    select_ln330_fu_470_p3 <= 
        trunc_ln331_reg_550_pp0_iter9_reg when (and_ln330_fu_465_p2(0) = '1') else 
        select_ln333_24_fu_453_p3;
    select_ln333_24_fu_453_p3 <= 
        select_ln336_fu_435_p3 when (and_ln333_24_fu_448_p2(0) = '1') else 
        select_ln326_reg_596;
    select_ln333_fu_389_p3 <= 
        trunc_ln334_fu_365_p1 when (and_ln333_fu_384_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln336_fu_435_p3 <= 
        ap_const_lv8_FF when (tmp_83_fu_428_p3(0) = '1') else 
        ap_const_lv8_0;
    select_ln343_fu_413_p3 <= 
        shl_ln345_fu_369_p2 when (and_ln343_fu_407_p2(0) = '1') else 
        select_ln333_fu_389_p3;
    select_ln351_fu_483_p3 <= 
        sub_ln461_fu_477_p2 when (p_Result_31_reg_545_pp0_iter9_reg(0) = '1') else 
        select_ln330_fu_470_p3;
        sext_ln329_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_562),32));

    sh_amt_24_fu_330_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sh_amt_reg_562));
    sh_amt_fu_286_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(exp_V_fu_272_p1));
    shl_ln345_fu_369_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln331_reg_550),to_integer(unsigned('0' & trunc_ln342_fu_335_p1(8-1 downto 0)))));
    sub_ln461_fu_477_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(select_ln330_fu_470_p3));
    tmp_35_fu_319_p3 <= (ap_const_lv1_1 & trunc_ln318_fu_316_p1);
    tmp_82_fu_339_p4 <= sh_amt_24_fu_330_p2(10 downto 3);
    tmp_83_fu_428_p3 <= reg_V_reg_539_pp0_iter9_reg(63 downto 63);
    tmp_fu_195_p3 <= (select_ln212_1_fu_187_p3 & ap_const_lv7_0);
    trunc_ln310_fu_250_p1 <= reg_V_fu_247_p1(63 - 1 downto 0);
    trunc_ln318_fu_316_p1 <= reg_V_reg_539(52 - 1 downto 0);
    trunc_ln331_fu_276_p1 <= reg_V_fu_247_p1(8 - 1 downto 0);
    trunc_ln334_fu_365_p1 <= lshr_ln334_fu_359_p2(8 - 1 downto 0);
    trunc_ln342_fu_335_p1 <= sh_amt_24_fu_330_p2(8 - 1 downto 0);
    x_V_address0 <= zext_ln215_7_fu_217_p1(14 - 1 downto 0);

    x_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_ce0 <= ap_const_logic_1;
        else 
            x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_bar_V_address0 <= zext_ln215_7_reg_504_pp0_iter10_reg(14 - 1 downto 0);

    x_bar_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            x_bar_V_ce0 <= ap_const_logic_1;
        else 
            x_bar_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_bar_V_d0 <= select_ln351_reg_601;

    x_bar_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln207_reg_490_pp0_iter10_reg, ap_enable_reg_pp0_iter11)
    begin
        if (((icmp_ln207_reg_490_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            x_bar_V_we0 <= ap_const_logic_1;
        else 
            x_bar_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_old_V_address0 <= zext_ln215_7_fu_217_p1(14 - 1 downto 0);

    x_old_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_old_V_ce0 <= ap_const_logic_1;
        else 
            x_old_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln326_fu_460_p2 <= (icmp_ln326_reg_556_pp0_iter9_reg xor ap_const_lv1_1);
    xor_ln330_fu_374_p2 <= (or_ln330_reg_585 xor ap_const_lv1_1);
    xor_ln332_fu_401_p2 <= (or_ln332_fu_397_p2 xor ap_const_lv1_1);
    xor_ln333_fu_443_p2 <= (icmp_ln333_reg_579_pp0_iter9_reg xor ap_const_lv1_1);
    zext_ln210_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_195_p3),16));
    zext_ln215_7_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_fu_211_p2),64));
    zext_ln215_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln212_fu_179_p3),16));
    zext_ln334_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln329_fu_327_p1),53));
end behav;
