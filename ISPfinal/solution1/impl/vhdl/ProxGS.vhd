-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ProxGS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_io_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    x_io_V_ce0 : OUT STD_LOGIC;
    x_io_V_we0 : OUT STD_LOGIC;
    x_io_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_io_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    coe_a_M_real_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    coe_a_M_real_V_ce0 : OUT STD_LOGIC;
    coe_a_M_real_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    coe_a_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    coe_a_M_imag_V_ce0 : OUT STD_LOGIC;
    coe_a_M_imag_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    coe_b_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    coe_b_V_ce0 : OUT STD_LOGIC;
    coe_b_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of ProxGS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_204 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_0_i_reg_215 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_i_reg_226 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten11_reg_237 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_0_reg_248 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_reg_259 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten23_reg_270 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_0_i1_reg_281 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_i2_reg_292 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln43_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_756 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln43_fu_319_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln43_fu_337_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln43_reg_765 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln43_1_fu_345_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln43_1_reg_770 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln43_fu_353_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln43_reg_775 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_5_fu_384_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln24_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter13 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter14 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter15 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter16 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter17 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter18 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter19 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter20 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter21 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter22 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln24_reg_790_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_790_pp1_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_fu_434_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln24_1_fu_460_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln24_1_reg_799 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln31_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_804_pp1_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1265_1_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1265_1_reg_809 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fu_523_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_13_fu_541_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_13_reg_839 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_14_fu_565_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_14_reg_844 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1148_fu_571_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln57_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_855 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state31_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln57_reg_855_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln57_fu_608_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln57_fu_626_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln57_reg_864 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln57_reg_864_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln57_1_fu_634_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln57_1_reg_869 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln57_1_reg_869_pp2_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_6_fu_669_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln359_fu_713_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln359_reg_885 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fft_top_fu_303_ap_ready : STD_LOGIC;
    signal grp_fft_top_fu_303_ap_done : STD_LOGIC;
    signal ap_sync_grp_fft_top_fu_303_ap_ready : STD_LOGIC;
    signal ap_sync_grp_fft_top_fu_303_ap_done : STD_LOGIC;
    signal ap_block_state5_on_subcall_done : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter22 : STD_LOGIC := '0';
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_state30_on_subcall_done : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state31 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal MAD_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal MAD_ce0 : STD_LOGIC;
    signal MAD_we0 : STD_LOGIC;
    signal MAD_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal MAD_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_result_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_ce0 : STD_LOGIC;
    signal fft_result_we0 : STD_LOGIC;
    signal fft_result_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp9_ce0 : STD_LOGIC;
    signal tmp9_we0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp9_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_top_fu_303_direction : STD_LOGIC;
    signal grp_fft_top_fu_303_in_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fft_top_fu_303_in_r_ce0 : STD_LOGIC;
    signal grp_fft_top_fu_303_in_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_top_fu_303_in_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_top_fu_303_in_r_we0 : STD_LOGIC;
    signal grp_fft_top_fu_303_in_r_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fft_top_fu_303_in_r_ce1 : STD_LOGIC;
    signal grp_fft_top_fu_303_in_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_top_fu_303_in_r_we1 : STD_LOGIC;
    signal grp_fft_top_fu_303_out_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fft_top_fu_303_out_r_ce0 : STD_LOGIC;
    signal grp_fft_top_fu_303_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_top_fu_303_out_r_we0 : STD_LOGIC;
    signal grp_fft_top_fu_303_out_r_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fft_top_fu_303_out_r_ce1 : STD_LOGIC;
    signal grp_fft_top_fu_303_out_r_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_top_fu_303_out_r_we1 : STD_LOGIC;
    signal grp_fft_top_fu_303_ovflo : STD_LOGIC;
    signal grp_fft_top_fu_303_direction_ap_ack : STD_LOGIC;
    signal grp_fft_top_fu_303_ap_start : STD_LOGIC;
    signal grp_fft_top_fu_303_ovflo_ap_vld : STD_LOGIC;
    signal grp_fft_top_fu_303_ap_idle : STD_LOGIC;
    signal grp_fft_top_fu_303_ap_continue : STD_LOGIC;
    signal ap_phi_mux_y_0_i_phi_fu_219_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_y_0_phi_fu_252_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_y_0_i1_phi_fu_285_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal grp_fft_top_fu_303_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_sync_reg_grp_fft_top_fu_303_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_fft_top_fu_303_ap_done : STD_LOGIC := '0';
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal zext_ln446_1_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_5_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln45_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_5_fu_325_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_fu_357_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln45_1_fu_365_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln446_fu_369_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln446_fu_373_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln45_fu_397_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln47_mid2_fu_390_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_84_fu_400_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln728_fu_411_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_415_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln26_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_440_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln24_fu_468_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_38_fu_480_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln24_fu_452_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_fu_492_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln29_mid2_fu_472_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_496_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln26_1_fu_488_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1265_fu_507_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1265_fu_511_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_12_fu_529_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_fu_533_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_fu_537_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_15_fu_547_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_7_fu_557_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_6_fu_561_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_575_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_580_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_575_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_580_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln703_1_fu_589_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln703_fu_585_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln59_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_6_fu_614_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln57_fu_642_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln59_fu_654_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln62_mid2_fu_646_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_85_fu_658_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln851_fu_691_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_s_fu_683_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln851_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_675_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln850_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln850_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_721_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln180_fu_732_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln59_1_fu_728_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln180_fu_735_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component fft_top IS
    port (
        direction : IN STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_r_we0 : OUT STD_LOGIC;
        in_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        in_r_ce1 : OUT STD_LOGIC;
        in_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_r_we1 : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_we0 : OUT STD_LOGIC;
        out_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_r_ce1 : OUT STD_LOGIC;
        out_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_we1 : OUT STD_LOGIC;
        ovflo : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        direction_ap_vld : IN STD_LOGIC;
        direction_ap_ack : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ovflo_ap_vld : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component cross_channel_debncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component ProxGS_MAD IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ProxGS_tmp9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (3 downto 0);
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    MAD_U : component ProxGS_MAD
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => MAD_address0,
        ce0 => MAD_ce0,
        we0 => MAD_we0,
        d0 => MAD_d0,
        q0 => MAD_q0);

    fft_result_U : component ProxGS_MAD
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fft_result_address0,
        ce0 => fft_result_ce0,
        we0 => fft_result_we0,
        d0 => grp_fft_top_fu_303_out_r_d0,
        q0 => fft_result_q0);

    tmp9_U : component ProxGS_tmp9
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp9_address0,
        ce0 => tmp9_ce0,
        we0 => tmp9_we0,
        d0 => tmp9_d0,
        q0 => tmp9_q0);

    grp_fft_top_fu_303 : component fft_top
    port map (
        direction => grp_fft_top_fu_303_direction,
        in_r_address0 => grp_fft_top_fu_303_in_r_address0,
        in_r_ce0 => grp_fft_top_fu_303_in_r_ce0,
        in_r_d0 => grp_fft_top_fu_303_in_r_d0,
        in_r_q0 => grp_fft_top_fu_303_in_r_q0,
        in_r_we0 => grp_fft_top_fu_303_in_r_we0,
        in_r_address1 => grp_fft_top_fu_303_in_r_address1,
        in_r_ce1 => grp_fft_top_fu_303_in_r_ce1,
        in_r_d1 => grp_fft_top_fu_303_in_r_d1,
        in_r_q1 => ap_const_lv32_0,
        in_r_we1 => grp_fft_top_fu_303_in_r_we1,
        out_r_address0 => grp_fft_top_fu_303_out_r_address0,
        out_r_ce0 => grp_fft_top_fu_303_out_r_ce0,
        out_r_d0 => grp_fft_top_fu_303_out_r_d0,
        out_r_q0 => ap_const_lv32_0,
        out_r_we0 => grp_fft_top_fu_303_out_r_we0,
        out_r_address1 => grp_fft_top_fu_303_out_r_address1,
        out_r_ce1 => grp_fft_top_fu_303_out_r_ce1,
        out_r_d1 => grp_fft_top_fu_303_out_r_d1,
        out_r_q1 => ap_const_lv32_0,
        out_r_we1 => grp_fft_top_fu_303_out_r_we1,
        ovflo => grp_fft_top_fu_303_ovflo,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        direction_ap_vld => ap_const_logic_1,
        direction_ap_ack => grp_fft_top_fu_303_direction_ap_ack,
        ap_start => grp_fft_top_fu_303_ap_start,
        ovflo_ap_vld => grp_fft_top_fu_303_ovflo_ap_vld,
        ap_done => grp_fft_top_fu_303_ap_done,
        ap_ready => grp_fft_top_fu_303_ap_ready,
        ap_idle => grp_fft_top_fu_303_ap_idle,
        ap_continue => grp_fft_top_fu_303_ap_continue);

    cross_channel_debncg_U62 : component cross_channel_debncg
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 17,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ret_V_13_reg_839,
        din1 => grp_fu_575_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_575_p2);

    cross_channel_debncg_U63 : component cross_channel_debncg
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 17,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ret_V_14_reg_844,
        din1 => grp_fu_580_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_580_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
                elsif (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp1_iter22 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state31) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state31)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state31);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_fft_top_fu_303_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_fft_top_fu_303_ap_done <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    ap_sync_reg_grp_fft_top_fu_303_ap_done <= ap_const_logic_0;
                elsif ((grp_fft_top_fu_303_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_fft_top_fu_303_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_fft_top_fu_303_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_grp_fft_top_fu_303_ap_ready <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    ap_sync_reg_grp_fft_top_fu_303_ap_ready <= ap_const_logic_0;
                elsif ((grp_fft_top_fu_303_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_fft_top_fu_303_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_top_fu_303_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft_top_fu_303_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_sync_grp_fft_top_fu_303_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_sync_grp_fft_top_fu_303_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    grp_fft_top_fu_303_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_top_fu_303_ap_ready = ap_const_logic_1)) then 
                    grp_fft_top_fu_303_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten11_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_428_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten11_reg_237 <= add_ln24_fu_434_p2;
            elsif (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                indvar_flatten11_reg_237 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                indvar_flatten23_reg_270 <= add_ln57_fu_608_p2;
            elsif (((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                indvar_flatten23_reg_270 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_fu_313_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_204 <= add_ln43_fu_319_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_204 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    x_0_i2_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                x_0_i2_reg_292 <= x_6_fu_669_p2;
            elsif (((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                x_0_i2_reg_292 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    x_0_i_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_fu_313_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                x_0_i_reg_226 <= x_5_fu_384_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x_0_i_reg_226 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    x_0_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_428_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                x_0_reg_259 <= x_fu_523_p2;
            elsif (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x_0_reg_259 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    y_0_i1_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_reg_855 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                y_0_i1_reg_281 <= select_ln57_1_reg_869;
            elsif (((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                y_0_i1_reg_281 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    y_0_i_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                y_0_i_reg_215 <= select_ln43_1_reg_770;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                y_0_i_reg_215 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    y_0_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_790 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                y_0_reg_248 <= select_ln24_1_reg_799;
            elsif (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                y_0_reg_248 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln24_reg_790 <= icmp_ln24_fu_428_p2;
                icmp_ln24_reg_790_pp1_iter1_reg <= icmp_ln24_reg_790;
                    zext_ln31_reg_804_pp1_iter1_reg(13 downto 0) <= zext_ln31_reg_804(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln24_reg_790_pp1_iter10_reg <= icmp_ln24_reg_790_pp1_iter9_reg;
                icmp_ln24_reg_790_pp1_iter11_reg <= icmp_ln24_reg_790_pp1_iter10_reg;
                icmp_ln24_reg_790_pp1_iter12_reg <= icmp_ln24_reg_790_pp1_iter11_reg;
                icmp_ln24_reg_790_pp1_iter13_reg <= icmp_ln24_reg_790_pp1_iter12_reg;
                icmp_ln24_reg_790_pp1_iter14_reg <= icmp_ln24_reg_790_pp1_iter13_reg;
                icmp_ln24_reg_790_pp1_iter15_reg <= icmp_ln24_reg_790_pp1_iter14_reg;
                icmp_ln24_reg_790_pp1_iter16_reg <= icmp_ln24_reg_790_pp1_iter15_reg;
                icmp_ln24_reg_790_pp1_iter17_reg <= icmp_ln24_reg_790_pp1_iter16_reg;
                icmp_ln24_reg_790_pp1_iter18_reg <= icmp_ln24_reg_790_pp1_iter17_reg;
                icmp_ln24_reg_790_pp1_iter19_reg <= icmp_ln24_reg_790_pp1_iter18_reg;
                icmp_ln24_reg_790_pp1_iter20_reg <= icmp_ln24_reg_790_pp1_iter19_reg;
                icmp_ln24_reg_790_pp1_iter21_reg <= icmp_ln24_reg_790_pp1_iter20_reg;
                icmp_ln24_reg_790_pp1_iter2_reg <= icmp_ln24_reg_790_pp1_iter1_reg;
                icmp_ln24_reg_790_pp1_iter3_reg <= icmp_ln24_reg_790_pp1_iter2_reg;
                icmp_ln24_reg_790_pp1_iter4_reg <= icmp_ln24_reg_790_pp1_iter3_reg;
                icmp_ln24_reg_790_pp1_iter5_reg <= icmp_ln24_reg_790_pp1_iter4_reg;
                icmp_ln24_reg_790_pp1_iter6_reg <= icmp_ln24_reg_790_pp1_iter5_reg;
                icmp_ln24_reg_790_pp1_iter7_reg <= icmp_ln24_reg_790_pp1_iter6_reg;
                icmp_ln24_reg_790_pp1_iter8_reg <= icmp_ln24_reg_790_pp1_iter7_reg;
                icmp_ln24_reg_790_pp1_iter9_reg <= icmp_ln24_reg_790_pp1_iter8_reg;
                    zext_ln31_reg_804_pp1_iter10_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter9_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter11_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter10_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter12_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter11_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter13_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter12_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter14_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter13_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter15_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter14_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter16_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter15_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter17_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter16_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter18_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter17_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter19_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter18_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter20_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter19_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter21_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter20_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter2_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter1_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter3_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter2_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter4_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter3_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter5_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter4_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter6_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter5_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter7_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter6_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter8_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter7_reg(13 downto 0);
                    zext_ln31_reg_804_pp1_iter9_reg(13 downto 0) <= zext_ln31_reg_804_pp1_iter8_reg(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln43_reg_756 <= icmp_ln43_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln57_reg_855 <= icmp_ln57_fu_602_p2;
                icmp_ln57_reg_855_pp2_iter1_reg <= icmp_ln57_reg_855;
                select_ln57_1_reg_869_pp2_iter1_reg <= select_ln57_1_reg_869;
                select_ln57_reg_864_pp2_iter1_reg <= select_ln57_reg_864;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_790 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ret_V_13_reg_839 <= ret_V_13_fu_541_p2;
                ret_V_14_reg_844 <= ret_V_14_fu_565_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_428_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln24_1_reg_799 <= select_ln24_1_fu_460_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_reg_855 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln359_reg_885 <= select_ln359_fu_713_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_fu_313_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln43_1_reg_770 <= select_ln43_1_fu_345_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_fu_313_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln43_reg_765 <= select_ln43_fu_337_p3;
                trunc_ln43_reg_775 <= trunc_ln43_fu_353_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln57_1_reg_869 <= select_ln57_1_fu_634_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln57_fu_602_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                select_ln57_reg_864 <= select_ln57_fu_626_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    zext_ln1265_1_reg_809(15 downto 0) <= zext_ln1265_1_fu_517_p1(15 downto 0);
                    zext_ln31_reg_804(13 downto 0) <= zext_ln31_fu_502_p1(13 downto 0);
            end if;
        end if;
    end process;
    zext_ln31_reg_804(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter1_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter2_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter3_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter4_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter5_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter6_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter7_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter8_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter9_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter10_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter11_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter12_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter13_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter14_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter15_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter16_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter17_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter18_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter19_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter20_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln31_reg_804_pp1_iter21_reg(63 downto 14) <= "00000000000000000000000000000000000000000000000000";
    zext_ln1265_1_reg_809(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln43_fu_313_p2, ap_enable_reg_pp0_iter0, icmp_ln24_fu_428_p2, ap_enable_reg_pp1_iter0, icmp_ln57_fu_602_p2, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state5, ap_block_state5_on_subcall_done, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter21, ap_enable_reg_pp1_iter22, ap_CS_fsm_state30, ap_block_state30_on_subcall_done, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln43_fu_313_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln43_fu_313_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln24_fu_428_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter21 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter22 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter21 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter22 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln24_fu_428_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln57_fu_602_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln57_fu_602_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    MAD_address0_assign_proc : process(zext_ln31_reg_804_pp1_iter21_reg, ap_enable_reg_pp1_iter22, ap_CS_fsm_state30, grp_fft_top_fu_303_in_r_address0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter22 = ap_const_logic_1))) then 
            MAD_address0 <= zext_ln31_reg_804_pp1_iter21_reg(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            MAD_address0 <= grp_fft_top_fu_303_in_r_address0;
        else 
            MAD_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    MAD_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter22, ap_CS_fsm_state30, grp_fft_top_fu_303_in_r_ce0)
    begin
        if (((ap_enable_reg_pp1_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            MAD_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            MAD_ce0 <= grp_fft_top_fu_303_in_r_ce0;
        else 
            MAD_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MAD_d0 <= (trunc_ln703_1_fu_589_p1 & trunc_ln703_fu_585_p1);

    MAD_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln24_reg_790_pp1_iter21_reg, ap_enable_reg_pp1_iter22)
    begin
        if (((icmp_ln24_reg_790_pp1_iter21_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            MAD_we0 <= ap_const_logic_1;
        else 
            MAD_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1265_fu_511_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_488_p1) + unsigned(zext_ln1265_fu_507_p1));
    add_ln180_fu_735_p2 <= std_logic_vector(unsigned(zext_ln180_fu_732_p1) + unsigned(zext_ln59_1_fu_728_p1));
    add_ln24_fu_434_p2 <= std_logic_vector(unsigned(indvar_flatten11_reg_237) + unsigned(ap_const_lv15_1));
    add_ln43_fu_319_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_204) + unsigned(ap_const_lv15_1));
    add_ln446_fu_373_p2 <= std_logic_vector(unsigned(zext_ln45_1_fu_365_p1) + unsigned(zext_ln446_fu_369_p1));
    add_ln57_fu_608_p2 <= std_logic_vector(unsigned(indvar_flatten23_reg_270) + unsigned(ap_const_lv15_1));
    and_ln850_fu_701_p2 <= (p_Result_s_fu_683_p3 and icmp_ln851_fu_695_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state29 <= ap_CS_fsm(5);
    ap_CS_fsm_state30 <= ap_CS_fsm(6);
    ap_CS_fsm_state34 <= ap_CS_fsm(8);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp1_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state30_on_subcall_done_assign_proc : process(ap_sync_grp_fft_top_fu_303_ap_ready, ap_sync_grp_fft_top_fu_303_ap_done)
    begin
                ap_block_state30_on_subcall_done <= ((ap_sync_grp_fft_top_fu_303_ap_ready and ap_sync_grp_fft_top_fu_303_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state31_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_on_subcall_done_assign_proc : process(ap_sync_grp_fft_top_fu_303_ap_ready, ap_sync_grp_fft_top_fu_303_ap_done)
    begin
                ap_block_state5_on_subcall_done <= ((ap_sync_grp_fft_top_fu_303_ap_ready and ap_sync_grp_fft_top_fu_303_ap_done) = ap_const_logic_0);
    end process;

        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln43_fu_313_p2)
    begin
        if ((icmp_ln43_fu_313_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln24_fu_428_p2)
    begin
        if ((icmp_ln24_fu_428_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state31_assign_proc : process(icmp_ln57_fu_602_p2)
    begin
        if ((icmp_ln57_fu_602_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state31 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12, ap_enable_reg_pp1_iter13, ap_enable_reg_pp1_iter14, ap_enable_reg_pp1_iter15, ap_enable_reg_pp1_iter16, ap_enable_reg_pp1_iter17, ap_enable_reg_pp1_iter18, ap_enable_reg_pp1_iter19, ap_enable_reg_pp1_iter20, ap_enable_reg_pp1_iter21, ap_enable_reg_pp1_iter22)
    begin
        if (((ap_enable_reg_pp1_iter22 = ap_const_logic_0) and (ap_enable_reg_pp1_iter21 = ap_const_logic_0) and (ap_enable_reg_pp1_iter20 = ap_const_logic_0) and (ap_enable_reg_pp1_iter19 = ap_const_logic_0) and (ap_enable_reg_pp1_iter18 = ap_const_logic_0) and (ap_enable_reg_pp1_iter17 = ap_const_logic_0) and (ap_enable_reg_pp1_iter16 = ap_const_logic_0) and (ap_enable_reg_pp1_iter15 = ap_const_logic_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_y_0_i1_phi_fu_285_p4_assign_proc : process(y_0_i1_reg_281, icmp_ln57_reg_855, ap_CS_fsm_pp2_stage0, select_ln57_1_reg_869, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((icmp_ln57_reg_855 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_y_0_i1_phi_fu_285_p4 <= select_ln57_1_reg_869;
        else 
            ap_phi_mux_y_0_i1_phi_fu_285_p4 <= y_0_i1_reg_281;
        end if; 
    end process;


    ap_phi_mux_y_0_i_phi_fu_219_p4_assign_proc : process(y_0_i_reg_215, icmp_ln43_reg_756, ap_CS_fsm_pp0_stage0, select_ln43_1_reg_770, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln43_reg_756 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_y_0_i_phi_fu_219_p4 <= select_ln43_1_reg_770;
        else 
            ap_phi_mux_y_0_i_phi_fu_219_p4 <= y_0_i_reg_215;
        end if; 
    end process;


    ap_phi_mux_y_0_phi_fu_252_p4_assign_proc : process(y_0_reg_248, icmp_ln24_reg_790, ap_CS_fsm_pp1_stage0, select_ln24_1_reg_799, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln24_reg_790 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_y_0_phi_fu_252_p4 <= select_ln24_1_reg_799;
        else 
            ap_phi_mux_y_0_phi_fu_252_p4 <= y_0_reg_248;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_grp_fft_top_fu_303_ap_done <= (grp_fft_top_fu_303_ap_done or ap_sync_reg_grp_fft_top_fu_303_ap_done);
    ap_sync_grp_fft_top_fu_303_ap_ready <= (grp_fft_top_fu_303_ap_ready or ap_sync_reg_grp_fft_top_fu_303_ap_ready);
    coe_a_M_imag_V_address0 <= zext_ln1265_1_fu_517_p1(14 - 1 downto 0);

    coe_a_M_imag_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            coe_a_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            coe_a_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coe_a_M_real_V_address0 <= zext_ln1265_1_fu_517_p1(14 - 1 downto 0);

    coe_a_M_real_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            coe_a_M_real_V_ce0 <= ap_const_logic_1;
        else 
            coe_a_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coe_b_V_address0 <= zext_ln1265_1_reg_809(14 - 1 downto 0);

    coe_b_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            coe_b_V_ce0 <= ap_const_logic_1;
        else 
            coe_b_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fft_result_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln31_fu_502_p1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state5, ap_CS_fsm_state30, grp_fft_top_fu_303_out_r_address0, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln64_fu_664_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            fft_result_address0 <= zext_ln64_fu_664_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            fft_result_address0 <= zext_ln31_fu_502_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fft_result_address0 <= grp_fft_top_fu_303_out_r_address0;
        else 
            fft_result_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    fft_result_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_state5, ap_CS_fsm_state30, grp_fft_top_fu_303_out_r_ce0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            fft_result_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fft_result_ce0 <= grp_fft_top_fu_303_out_r_ce0;
        else 
            fft_result_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fft_result_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state30, grp_fft_top_fu_303_out_r_we0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            fft_result_we0 <= grp_fft_top_fu_303_out_r_we0;
        else 
            fft_result_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fft_top_fu_303_ap_continue_assign_proc : process(ap_CS_fsm_state5, ap_block_state5_on_subcall_done, ap_CS_fsm_state30, ap_block_state30_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state30_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((ap_const_boolean_0 = ap_block_state5_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            grp_fft_top_fu_303_ap_continue <= ap_const_logic_1;
        else 
            grp_fft_top_fu_303_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_fft_top_fu_303_ap_start <= grp_fft_top_fu_303_ap_start_reg;

    grp_fft_top_fu_303_direction_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fft_top_fu_303_direction <= ap_const_logic_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fft_top_fu_303_direction <= ap_const_logic_1;
        else 
            grp_fft_top_fu_303_direction <= 'X';
        end if; 
    end process;


    grp_fft_top_fu_303_in_r_q0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state30, MAD_q0, tmp9_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fft_top_fu_303_in_r_q0 <= MAD_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fft_top_fu_303_in_r_q0 <= tmp9_q0;
        else 
            grp_fft_top_fu_303_in_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_575_p1 <= sext_ln1148_fu_571_p1(8 - 1 downto 0);
    grp_fu_580_p1 <= sext_ln1148_fu_571_p1(8 - 1 downto 0);
    icmp_ln24_fu_428_p2 <= "1" when (indvar_flatten11_reg_237 = ap_const_lv15_4000) else "0";
    icmp_ln26_fu_446_p2 <= "1" when (x_0_reg_259 = ap_const_lv8_80) else "0";
    icmp_ln43_fu_313_p2 <= "1" when (indvar_flatten_reg_204 = ap_const_lv15_4000) else "0";
    icmp_ln45_fu_331_p2 <= "1" when (x_0_i_reg_226 = ap_const_lv8_80) else "0";
    icmp_ln57_fu_602_p2 <= "1" when (indvar_flatten23_reg_270 = ap_const_lv15_4000) else "0";
    icmp_ln59_fu_620_p2 <= "1" when (x_0_i2_reg_292 = ap_const_lv8_80) else "0";
    icmp_ln851_fu_695_p2 <= "0" when (trunc_ln851_fu_691_p1 = ap_const_lv15_0) else "1";
        lhs_V_7_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_15_fu_547_p4),17));

        lhs_V_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_12_fu_529_p1),17));

    p_Result_s_fu_683_p3 <= fft_result_q0(15 downto 15);
    p_Val2_12_fu_529_p1 <= fft_result_q0(16 - 1 downto 0);
    p_Val2_15_fu_547_p4 <= fft_result_q0(31 downto 16);
    ret_V_13_fu_541_p2 <= std_logic_vector(signed(lhs_V_fu_533_p1) + signed(rhs_V_fu_537_p1));
    ret_V_14_fu_565_p2 <= std_logic_vector(signed(lhs_V_7_fu_557_p1) + signed(rhs_V_6_fu_561_p1));
    ret_V_fu_675_p3 <= fft_result_q0(15 downto 15);
        rhs_V_6_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(coe_a_M_imag_V_q0),17));

        rhs_V_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(coe_a_M_real_V_q0),17));

    select_ln24_1_fu_460_p3 <= 
        y_fu_440_p2 when (icmp_ln26_fu_446_p2(0) = '1') else 
        ap_phi_mux_y_0_phi_fu_252_p4;
    select_ln24_fu_452_p3 <= 
        ap_const_lv8_0 when (icmp_ln26_fu_446_p2(0) = '1') else 
        x_0_reg_259;
    select_ln359_fu_713_p3 <= 
        ap_const_lv8_FF when (xor_ln850_fu_707_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln43_1_fu_345_p3 <= 
        y_5_fu_325_p2 when (icmp_ln45_fu_331_p2(0) = '1') else 
        ap_phi_mux_y_0_i_phi_fu_219_p4;
    select_ln43_fu_337_p3 <= 
        ap_const_lv8_0 when (icmp_ln45_fu_331_p2(0) = '1') else 
        x_0_i_reg_226;
    select_ln57_1_fu_634_p3 <= 
        y_6_fu_614_p2 when (icmp_ln59_fu_620_p2(0) = '1') else 
        ap_phi_mux_y_0_i1_phi_fu_285_p4;
    select_ln57_fu_626_p3 <= 
        ap_const_lv8_0 when (icmp_ln59_fu_620_p2(0) = '1') else 
        x_0_i2_reg_292;
        sext_ln1148_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(coe_b_V_q0),17));

    shl_ln29_mid2_fu_472_p3 <= (trunc_ln24_fu_468_p1 & ap_const_lv7_0);
    shl_ln47_mid2_fu_390_p3 <= (trunc_ln43_reg_775 & ap_const_lv7_0);
    shl_ln62_mid2_fu_646_p3 <= (trunc_ln57_fu_642_p1 & ap_const_lv7_0);
    shl_ln_fu_415_p3 <= (trunc_ln728_fu_411_p1 & ap_const_lv15_0);

    tmp9_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state5, grp_fft_top_fu_303_in_r_address0, ap_block_pp0_stage0, zext_ln49_fu_406_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            tmp9_address0 <= zext_ln49_fu_406_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp9_address0 <= grp_fft_top_fu_303_in_r_address0;
        else 
            tmp9_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    tmp9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_state5, grp_fft_top_fu_303_in_r_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            tmp9_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            tmp9_ce0 <= grp_fft_top_fu_303_in_r_ce0;
        else 
            tmp9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp9_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_415_p3),32));

    tmp9_we0_assign_proc : process(icmp_ln43_reg_756, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln43_reg_756 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            tmp9_we0 <= ap_const_lv4_3;
        else 
            tmp9_we0 <= ap_const_lv4_0;
        end if; 
    end process;

    tmp_37_fu_357_p3 <= (select_ln43_1_fu_345_p3 & ap_const_lv7_0);
    tmp_38_fu_480_p3 <= (select_ln24_1_fu_460_p3 & ap_const_lv7_0);
    tmp_39_fu_721_p3 <= (select_ln57_1_reg_869_pp2_iter1_reg & ap_const_lv7_0);
    tmp_84_fu_400_p2 <= std_logic_vector(unsigned(zext_ln45_fu_397_p1) + unsigned(shl_ln47_mid2_fu_390_p3));
    tmp_85_fu_658_p2 <= std_logic_vector(unsigned(zext_ln59_fu_654_p1) + unsigned(shl_ln62_mid2_fu_646_p3));
    tmp_fu_496_p2 <= std_logic_vector(unsigned(zext_ln26_fu_492_p1) + unsigned(shl_ln29_mid2_fu_472_p3));
    trunc_ln24_fu_468_p1 <= select_ln24_1_fu_460_p3(7 - 1 downto 0);
    trunc_ln43_fu_353_p1 <= select_ln43_1_fu_345_p3(7 - 1 downto 0);
    trunc_ln57_fu_642_p1 <= select_ln57_1_fu_634_p3(7 - 1 downto 0);
    trunc_ln703_1_fu_589_p1 <= grp_fu_580_p2(16 - 1 downto 0);
    trunc_ln703_fu_585_p1 <= grp_fu_575_p2(16 - 1 downto 0);
    trunc_ln728_fu_411_p1 <= x_io_V_q0(1 - 1 downto 0);
    trunc_ln851_fu_691_p1 <= fft_result_q0(15 - 1 downto 0);
    x_5_fu_384_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(select_ln43_fu_337_p3));
    x_6_fu_669_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(select_ln57_fu_626_p3));
    x_fu_523_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(select_ln24_fu_452_p3));

    x_io_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp2_iter2, ap_block_pp0_stage0, ap_block_pp2_stage0, zext_ln446_1_fu_379_p1, zext_ln180_5_fu_741_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            x_io_V_address0 <= zext_ln180_5_fu_741_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_io_V_address0 <= zext_ln446_1_fu_379_p1(14 - 1 downto 0);
        else 
            x_io_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    x_io_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)))) then 
            x_io_V_ce0 <= ap_const_logic_1;
        else 
            x_io_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_io_V_d0 <= select_ln359_reg_885;

    x_io_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln57_reg_855_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((icmp_ln57_reg_855_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            x_io_V_we0 <= ap_const_logic_1;
        else 
            x_io_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln850_fu_707_p2 <= (ret_V_fu_675_p3 xor and_ln850_fu_701_p2);
    y_5_fu_325_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_y_0_i_phi_fu_219_p4));
    y_6_fu_614_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_y_0_i1_phi_fu_285_p4));
    y_fu_440_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_y_0_phi_fu_252_p4));
    zext_ln1265_1_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1265_fu_511_p2),64));
    zext_ln1265_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_fu_452_p3),16));
    zext_ln180_5_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_fu_735_p2),64));
    zext_ln180_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_reg_864_pp2_iter1_reg),16));
    zext_ln26_1_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_480_p3),16));
    zext_ln26_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_fu_452_p3),14));
    zext_ln31_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_496_p2),64));
    zext_ln446_1_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln446_fu_373_p2),64));
    zext_ln446_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln43_fu_337_p3),16));
    zext_ln45_1_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_357_p3),16));
    zext_ln45_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln43_reg_765),14));
    zext_ln49_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_84_fu_400_p2),64));
    zext_ln59_1_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_721_p3),16));
    zext_ln59_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_fu_626_p3),14));
    zext_ln64_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_85_fu_658_p2),64));
end behav;
