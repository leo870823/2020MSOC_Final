-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cross_channel_deblur is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Img_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Img_V_ce0 : OUT STD_LOGIC;
    Img_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    adjChImg_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    adjChImg_V_ce0 : OUT STD_LOGIC;
    adjChImg_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    adjChImg_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    adjChImg_V_ce1 : OUT STD_LOGIC;
    adjChImg_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    coe_a_M_real_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    coe_a_M_real_V_ce0 : OUT STD_LOGIC;
    coe_a_M_real_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    coe_a_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    coe_a_M_imag_V_ce0 : OUT STD_LOGIC;
    coe_a_M_imag_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    coe_b_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    coe_b_V_ce0 : OUT STD_LOGIC;
    coe_b_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of cross_channel_deblur is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cross_channel_deblur,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=38596862,HLS_SYN_TPT=none,HLS_SYN_MEM=427,HLS_SYN_DSP=72,HLS_SYN_FF=25179,HLS_SYN_LUT=38016,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln24_fu_299_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln29_1_fu_325_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln24_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_366_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_fu_378_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_reg_405 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal x_bar_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_bar_V_ce0 : STD_LOGIC;
    signal x_bar_V_we0 : STD_LOGIC;
    signal x_bar_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_bar_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_bar_V_ce1 : STD_LOGIC;
    signal x_bar_V_we1 : STD_LOGIC;
    signal x_bar_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_old_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_old_V_ce0 : STD_LOGIC;
    signal x_old_V_we0 : STD_LOGIC;
    signal x_old_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_V_ce0 : STD_LOGIC;
    signal x_V_we0 : STD_LOGIC;
    signal x_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_1_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_1_V_ce0 : STD_LOGIC;
    signal y_1_V_we0 : STD_LOGIC;
    signal y_1_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_1_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_1_V_ce1 : STD_LOGIC;
    signal y_1_V_we1 : STD_LOGIC;
    signal y_1_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_2_V_ce0 : STD_LOGIC;
    signal y_2_V_we0 : STD_LOGIC;
    signal y_2_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_2_V_ce1 : STD_LOGIC;
    signal y_2_V_we1 : STD_LOGIC;
    signal y_2_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_3_V_ce0 : STD_LOGIC;
    signal y_3_V_we0 : STD_LOGIC;
    signal y_3_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_3_V_ce1 : STD_LOGIC;
    signal y_3_V_we1 : STD_LOGIC;
    signal y_3_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_4_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_4_V_ce0 : STD_LOGIC;
    signal y_4_V_we0 : STD_LOGIC;
    signal y_4_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_4_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_4_V_ce1 : STD_LOGIC;
    signal y_4_V_we1 : STD_LOGIC;
    signal y_4_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_5_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_5_V_ce0 : STD_LOGIC;
    signal y_5_V_we0 : STD_LOGIC;
    signal y_5_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_5_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_5_V_ce1 : STD_LOGIC;
    signal y_5_V_we1 : STD_LOGIC;
    signal y_5_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_6_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_6_V_ce0 : STD_LOGIC;
    signal y_6_V_we0 : STD_LOGIC;
    signal y_6_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_6_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_6_V_ce1 : STD_LOGIC;
    signal y_6_V_we1 : STD_LOGIC;
    signal y_6_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_7_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_7_V_ce0 : STD_LOGIC;
    signal y_7_V_we0 : STD_LOGIC;
    signal y_7_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_7_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_7_V_ce1 : STD_LOGIC;
    signal y_7_V_we1 : STD_LOGIC;
    signal y_7_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v1_fu_253_ap_start : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_ap_done : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_ap_idle : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_ap_ready : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_f_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_f_V_ce0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_f_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_f_V_ce1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_f_V_we1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_f_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v1_fu_253_adjChImg_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_adjChImg_V_ce0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_adjChImg_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_adjChImg_V_ce1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g1_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_g1_V_ce0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g1_V_we0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g1_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v1_fu_253_g1_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_g1_V_ce1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g1_V_we1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g1_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v1_fu_253_g2_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_g2_V_ce0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g2_V_we0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g2_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v1_fu_253_g2_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_g2_V_ce1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g2_V_we1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g2_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v1_fu_253_g3_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_g3_V_ce0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g3_V_we0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g3_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v1_fu_253_g3_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_g3_V_ce1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g3_V_we1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g3_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v1_fu_253_g4_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_g4_V_ce0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g4_V_we0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g4_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v1_fu_253_g4_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_g4_V_ce1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g4_V_we1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g4_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v1_fu_253_g5_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_g5_V_ce0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g5_V_we0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g5_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v1_fu_253_g5_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_g5_V_ce1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g5_V_we1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g5_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v1_fu_253_g6_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_g6_V_ce0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g6_V_we0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g6_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v1_fu_253_g6_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_g6_V_ce1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g6_V_we1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g6_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v1_fu_253_g7_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_g7_V_ce0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g7_V_we0 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g7_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_my_filter_v1_fu_253_g7_V_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_my_filter_v1_fu_253_g7_V_ce1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g7_V_we1 : STD_LOGIC;
    signal grp_my_filter_v1_fu_253_g7_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ProxGS_fu_267_ap_start : STD_LOGIC;
    signal grp_ProxGS_fu_267_ap_done : STD_LOGIC;
    signal grp_ProxGS_fu_267_ap_idle : STD_LOGIC;
    signal grp_ProxGS_fu_267_ap_ready : STD_LOGIC;
    signal grp_ProxGS_fu_267_x_io_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_ProxGS_fu_267_x_io_V_ce0 : STD_LOGIC;
    signal grp_ProxGS_fu_267_x_io_V_we0 : STD_LOGIC;
    signal grp_ProxGS_fu_267_x_io_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_ProxGS_fu_267_coe_a_M_real_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_ProxGS_fu_267_coe_a_M_real_V_ce0 : STD_LOGIC;
    signal grp_ProxGS_fu_267_coe_a_M_imag_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_ProxGS_fu_267_coe_a_M_imag_V_ce0 : STD_LOGIC;
    signal grp_ProxGS_fu_267_coe_b_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_ProxGS_fu_267_coe_b_V_ce0 : STD_LOGIC;
    signal grp_Relax_fu_278_ap_start : STD_LOGIC;
    signal grp_Relax_fu_278_ap_done : STD_LOGIC;
    signal grp_Relax_fu_278_ap_idle : STD_LOGIC;
    signal grp_Relax_fu_278_ap_ready : STD_LOGIC;
    signal grp_Relax_fu_278_x_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_Relax_fu_278_x_V_ce0 : STD_LOGIC;
    signal grp_Relax_fu_278_x_old_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_Relax_fu_278_x_old_V_ce0 : STD_LOGIC;
    signal grp_Relax_fu_278_x_bar_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_Relax_fu_278_x_bar_V_ce0 : STD_LOGIC;
    signal grp_Relax_fu_278_x_bar_V_we0 : STD_LOGIC;
    signal grp_Relax_fu_278_x_bar_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_array_copy_fu_285_ap_start : STD_LOGIC;
    signal grp_array_copy_fu_285_ap_done : STD_LOGIC;
    signal grp_array_copy_fu_285_ap_idle : STD_LOGIC;
    signal grp_array_copy_fu_285_ap_ready : STD_LOGIC;
    signal grp_array_copy_fu_285_data_in_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_array_copy_fu_285_data_in_V_ce0 : STD_LOGIC;
    signal grp_array_copy_fu_285_data_in_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_array_copy_fu_285_data_out_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_array_copy_fu_285_data_out_V_ce0 : STD_LOGIC;
    signal grp_array_copy_fu_285_data_out_V_we0 : STD_LOGIC;
    signal grp_array_copy_fu_285_data_out_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_reg_209 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal y_0_i_reg_220 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_i_reg_231 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_0_reg_242 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_my_filter_v1_fu_253_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln61_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_ProxGS_fu_267_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_Relax_fu_278_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_array_copy_fu_285_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln180_3_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln26_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_305_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_333_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln29_fu_317_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln180_fu_345_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln27_fu_341_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln180_fu_349_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state8_on_subcall_done : BOOLEAN;

    component my_filter_v1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        f_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        f_V_ce0 : OUT STD_LOGIC;
        f_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        f_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        f_V_ce1 : OUT STD_LOGIC;
        f_V_we1 : OUT STD_LOGIC;
        f_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        f_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        adjChImg_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        adjChImg_V_ce0 : OUT STD_LOGIC;
        adjChImg_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        adjChImg_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        adjChImg_V_ce1 : OUT STD_LOGIC;
        adjChImg_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        g1_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g1_V_ce0 : OUT STD_LOGIC;
        g1_V_we0 : OUT STD_LOGIC;
        g1_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        g1_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        g1_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g1_V_ce1 : OUT STD_LOGIC;
        g1_V_we1 : OUT STD_LOGIC;
        g1_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        g1_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        g2_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g2_V_ce0 : OUT STD_LOGIC;
        g2_V_we0 : OUT STD_LOGIC;
        g2_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        g2_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        g2_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g2_V_ce1 : OUT STD_LOGIC;
        g2_V_we1 : OUT STD_LOGIC;
        g2_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        g2_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        g3_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g3_V_ce0 : OUT STD_LOGIC;
        g3_V_we0 : OUT STD_LOGIC;
        g3_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        g3_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        g3_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g3_V_ce1 : OUT STD_LOGIC;
        g3_V_we1 : OUT STD_LOGIC;
        g3_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        g3_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        g4_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g4_V_ce0 : OUT STD_LOGIC;
        g4_V_we0 : OUT STD_LOGIC;
        g4_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        g4_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        g4_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g4_V_ce1 : OUT STD_LOGIC;
        g4_V_we1 : OUT STD_LOGIC;
        g4_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        g4_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        g5_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g5_V_ce0 : OUT STD_LOGIC;
        g5_V_we0 : OUT STD_LOGIC;
        g5_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        g5_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        g5_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g5_V_ce1 : OUT STD_LOGIC;
        g5_V_we1 : OUT STD_LOGIC;
        g5_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        g5_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        g6_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g6_V_ce0 : OUT STD_LOGIC;
        g6_V_we0 : OUT STD_LOGIC;
        g6_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        g6_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        g6_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g6_V_ce1 : OUT STD_LOGIC;
        g6_V_we1 : OUT STD_LOGIC;
        g6_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        g6_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        g7_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g7_V_ce0 : OUT STD_LOGIC;
        g7_V_we0 : OUT STD_LOGIC;
        g7_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        g7_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        g7_V_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        g7_V_ce1 : OUT STD_LOGIC;
        g7_V_we1 : OUT STD_LOGIC;
        g7_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        g7_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component ProxGS IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_io_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        x_io_V_ce0 : OUT STD_LOGIC;
        x_io_V_we0 : OUT STD_LOGIC;
        x_io_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        x_io_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        coe_a_M_real_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        coe_a_M_real_V_ce0 : OUT STD_LOGIC;
        coe_a_M_real_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        coe_a_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        coe_a_M_imag_V_ce0 : OUT STD_LOGIC;
        coe_a_M_imag_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        coe_b_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        coe_b_V_ce0 : OUT STD_LOGIC;
        coe_b_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Relax IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        x_V_ce0 : OUT STD_LOGIC;
        x_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        x_old_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        x_old_V_ce0 : OUT STD_LOGIC;
        x_old_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        x_bar_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        x_bar_V_ce0 : OUT STD_LOGIC;
        x_bar_V_we0 : OUT STD_LOGIC;
        x_bar_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component array_copy IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_in_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        data_in_V_ce0 : OUT STD_LOGIC;
        data_in_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_out_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        data_out_V_ce0 : OUT STD_LOGIC;
        data_out_V_we0 : OUT STD_LOGIC;
        data_out_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cross_channel_debocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component my_filter_v1_fxx IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    x_bar_V_U : component cross_channel_debocq
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_bar_V_address0,
        ce0 => x_bar_V_ce0,
        we0 => x_bar_V_we0,
        d0 => x_bar_V_d0,
        q0 => x_bar_V_q0,
        address1 => grp_my_filter_v1_fu_253_f_V_address1,
        ce1 => x_bar_V_ce1,
        we1 => x_bar_V_we1,
        d1 => grp_my_filter_v1_fu_253_f_V_d1,
        q1 => x_bar_V_q1);

    x_old_V_U : component my_filter_v1_fxx
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_old_V_address0,
        ce0 => x_old_V_ce0,
        we0 => x_old_V_we0,
        d0 => grp_array_copy_fu_285_data_out_V_d0,
        q0 => x_old_V_q0);

    x_V_U : component my_filter_v1_fxx
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_V_address0,
        ce0 => x_V_ce0,
        we0 => x_V_we0,
        d0 => grp_array_copy_fu_285_data_out_V_d0,
        q0 => x_V_q0);

    y_1_V_U : component cross_channel_debocq
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_1_V_address0,
        ce0 => y_1_V_ce0,
        we0 => y_1_V_we0,
        d0 => y_1_V_d0,
        q0 => y_1_V_q0,
        address1 => grp_my_filter_v1_fu_253_g1_V_address1,
        ce1 => y_1_V_ce1,
        we1 => y_1_V_we1,
        d1 => grp_my_filter_v1_fu_253_g1_V_d1,
        q1 => y_1_V_q1);

    y_2_V_U : component cross_channel_debocq
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_2_V_address0,
        ce0 => y_2_V_ce0,
        we0 => y_2_V_we0,
        d0 => y_2_V_d0,
        q0 => y_2_V_q0,
        address1 => grp_my_filter_v1_fu_253_g2_V_address1,
        ce1 => y_2_V_ce1,
        we1 => y_2_V_we1,
        d1 => grp_my_filter_v1_fu_253_g2_V_d1,
        q1 => y_2_V_q1);

    y_3_V_U : component cross_channel_debocq
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_3_V_address0,
        ce0 => y_3_V_ce0,
        we0 => y_3_V_we0,
        d0 => y_3_V_d0,
        q0 => y_3_V_q0,
        address1 => grp_my_filter_v1_fu_253_g3_V_address1,
        ce1 => y_3_V_ce1,
        we1 => y_3_V_we1,
        d1 => grp_my_filter_v1_fu_253_g3_V_d1,
        q1 => y_3_V_q1);

    y_4_V_U : component cross_channel_debocq
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_4_V_address0,
        ce0 => y_4_V_ce0,
        we0 => y_4_V_we0,
        d0 => y_4_V_d0,
        q0 => y_4_V_q0,
        address1 => grp_my_filter_v1_fu_253_g4_V_address1,
        ce1 => y_4_V_ce1,
        we1 => y_4_V_we1,
        d1 => grp_my_filter_v1_fu_253_g4_V_d1,
        q1 => y_4_V_q1);

    y_5_V_U : component cross_channel_debocq
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_5_V_address0,
        ce0 => y_5_V_ce0,
        we0 => y_5_V_we0,
        d0 => y_5_V_d0,
        q0 => y_5_V_q0,
        address1 => grp_my_filter_v1_fu_253_g5_V_address1,
        ce1 => y_5_V_ce1,
        we1 => y_5_V_we1,
        d1 => grp_my_filter_v1_fu_253_g5_V_d1,
        q1 => y_5_V_q1);

    y_6_V_U : component cross_channel_debocq
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_6_V_address0,
        ce0 => y_6_V_ce0,
        we0 => y_6_V_we0,
        d0 => y_6_V_d0,
        q0 => y_6_V_q0,
        address1 => grp_my_filter_v1_fu_253_g6_V_address1,
        ce1 => y_6_V_ce1,
        we1 => y_6_V_we1,
        d1 => grp_my_filter_v1_fu_253_g6_V_d1,
        q1 => y_6_V_q1);

    y_7_V_U : component cross_channel_debocq
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_7_V_address0,
        ce0 => y_7_V_ce0,
        we0 => y_7_V_we0,
        d0 => y_7_V_d0,
        q0 => y_7_V_q0,
        address1 => grp_my_filter_v1_fu_253_g7_V_address1,
        ce1 => y_7_V_ce1,
        we1 => y_7_V_we1,
        d1 => grp_my_filter_v1_fu_253_g7_V_d1,
        q1 => y_7_V_q1);

    grp_my_filter_v1_fu_253 : component my_filter_v1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_my_filter_v1_fu_253_ap_start,
        ap_done => grp_my_filter_v1_fu_253_ap_done,
        ap_idle => grp_my_filter_v1_fu_253_ap_idle,
        ap_ready => grp_my_filter_v1_fu_253_ap_ready,
        f_V_address0 => grp_my_filter_v1_fu_253_f_V_address0,
        f_V_ce0 => grp_my_filter_v1_fu_253_f_V_ce0,
        f_V_q0 => x_bar_V_q0,
        f_V_address1 => grp_my_filter_v1_fu_253_f_V_address1,
        f_V_ce1 => grp_my_filter_v1_fu_253_f_V_ce1,
        f_V_we1 => grp_my_filter_v1_fu_253_f_V_we1,
        f_V_d1 => grp_my_filter_v1_fu_253_f_V_d1,
        f_V_q1 => x_bar_V_q1,
        adjChImg_V_address0 => grp_my_filter_v1_fu_253_adjChImg_V_address0,
        adjChImg_V_ce0 => grp_my_filter_v1_fu_253_adjChImg_V_ce0,
        adjChImg_V_q0 => adjChImg_V_q0,
        adjChImg_V_address1 => grp_my_filter_v1_fu_253_adjChImg_V_address1,
        adjChImg_V_ce1 => grp_my_filter_v1_fu_253_adjChImg_V_ce1,
        adjChImg_V_q1 => adjChImg_V_q1,
        g1_V_address0 => grp_my_filter_v1_fu_253_g1_V_address0,
        g1_V_ce0 => grp_my_filter_v1_fu_253_g1_V_ce0,
        g1_V_we0 => grp_my_filter_v1_fu_253_g1_V_we0,
        g1_V_d0 => grp_my_filter_v1_fu_253_g1_V_d0,
        g1_V_q0 => y_1_V_q0,
        g1_V_address1 => grp_my_filter_v1_fu_253_g1_V_address1,
        g1_V_ce1 => grp_my_filter_v1_fu_253_g1_V_ce1,
        g1_V_we1 => grp_my_filter_v1_fu_253_g1_V_we1,
        g1_V_d1 => grp_my_filter_v1_fu_253_g1_V_d1,
        g1_V_q1 => y_1_V_q1,
        g2_V_address0 => grp_my_filter_v1_fu_253_g2_V_address0,
        g2_V_ce0 => grp_my_filter_v1_fu_253_g2_V_ce0,
        g2_V_we0 => grp_my_filter_v1_fu_253_g2_V_we0,
        g2_V_d0 => grp_my_filter_v1_fu_253_g2_V_d0,
        g2_V_q0 => y_2_V_q0,
        g2_V_address1 => grp_my_filter_v1_fu_253_g2_V_address1,
        g2_V_ce1 => grp_my_filter_v1_fu_253_g2_V_ce1,
        g2_V_we1 => grp_my_filter_v1_fu_253_g2_V_we1,
        g2_V_d1 => grp_my_filter_v1_fu_253_g2_V_d1,
        g2_V_q1 => y_2_V_q1,
        g3_V_address0 => grp_my_filter_v1_fu_253_g3_V_address0,
        g3_V_ce0 => grp_my_filter_v1_fu_253_g3_V_ce0,
        g3_V_we0 => grp_my_filter_v1_fu_253_g3_V_we0,
        g3_V_d0 => grp_my_filter_v1_fu_253_g3_V_d0,
        g3_V_q0 => y_3_V_q0,
        g3_V_address1 => grp_my_filter_v1_fu_253_g3_V_address1,
        g3_V_ce1 => grp_my_filter_v1_fu_253_g3_V_ce1,
        g3_V_we1 => grp_my_filter_v1_fu_253_g3_V_we1,
        g3_V_d1 => grp_my_filter_v1_fu_253_g3_V_d1,
        g3_V_q1 => y_3_V_q1,
        g4_V_address0 => grp_my_filter_v1_fu_253_g4_V_address0,
        g4_V_ce0 => grp_my_filter_v1_fu_253_g4_V_ce0,
        g4_V_we0 => grp_my_filter_v1_fu_253_g4_V_we0,
        g4_V_d0 => grp_my_filter_v1_fu_253_g4_V_d0,
        g4_V_q0 => y_4_V_q0,
        g4_V_address1 => grp_my_filter_v1_fu_253_g4_V_address1,
        g4_V_ce1 => grp_my_filter_v1_fu_253_g4_V_ce1,
        g4_V_we1 => grp_my_filter_v1_fu_253_g4_V_we1,
        g4_V_d1 => grp_my_filter_v1_fu_253_g4_V_d1,
        g4_V_q1 => y_4_V_q1,
        g5_V_address0 => grp_my_filter_v1_fu_253_g5_V_address0,
        g5_V_ce0 => grp_my_filter_v1_fu_253_g5_V_ce0,
        g5_V_we0 => grp_my_filter_v1_fu_253_g5_V_we0,
        g5_V_d0 => grp_my_filter_v1_fu_253_g5_V_d0,
        g5_V_q0 => y_5_V_q0,
        g5_V_address1 => grp_my_filter_v1_fu_253_g5_V_address1,
        g5_V_ce1 => grp_my_filter_v1_fu_253_g5_V_ce1,
        g5_V_we1 => grp_my_filter_v1_fu_253_g5_V_we1,
        g5_V_d1 => grp_my_filter_v1_fu_253_g5_V_d1,
        g5_V_q1 => y_5_V_q1,
        g6_V_address0 => grp_my_filter_v1_fu_253_g6_V_address0,
        g6_V_ce0 => grp_my_filter_v1_fu_253_g6_V_ce0,
        g6_V_we0 => grp_my_filter_v1_fu_253_g6_V_we0,
        g6_V_d0 => grp_my_filter_v1_fu_253_g6_V_d0,
        g6_V_q0 => y_6_V_q0,
        g6_V_address1 => grp_my_filter_v1_fu_253_g6_V_address1,
        g6_V_ce1 => grp_my_filter_v1_fu_253_g6_V_ce1,
        g6_V_we1 => grp_my_filter_v1_fu_253_g6_V_we1,
        g6_V_d1 => grp_my_filter_v1_fu_253_g6_V_d1,
        g6_V_q1 => y_6_V_q1,
        g7_V_address0 => grp_my_filter_v1_fu_253_g7_V_address0,
        g7_V_ce0 => grp_my_filter_v1_fu_253_g7_V_ce0,
        g7_V_we0 => grp_my_filter_v1_fu_253_g7_V_we0,
        g7_V_d0 => grp_my_filter_v1_fu_253_g7_V_d0,
        g7_V_q0 => y_7_V_q0,
        g7_V_address1 => grp_my_filter_v1_fu_253_g7_V_address1,
        g7_V_ce1 => grp_my_filter_v1_fu_253_g7_V_ce1,
        g7_V_we1 => grp_my_filter_v1_fu_253_g7_V_we1,
        g7_V_d1 => grp_my_filter_v1_fu_253_g7_V_d1,
        g7_V_q1 => y_7_V_q1);

    grp_ProxGS_fu_267 : component ProxGS
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ProxGS_fu_267_ap_start,
        ap_done => grp_ProxGS_fu_267_ap_done,
        ap_idle => grp_ProxGS_fu_267_ap_idle,
        ap_ready => grp_ProxGS_fu_267_ap_ready,
        x_io_V_address0 => grp_ProxGS_fu_267_x_io_V_address0,
        x_io_V_ce0 => grp_ProxGS_fu_267_x_io_V_ce0,
        x_io_V_we0 => grp_ProxGS_fu_267_x_io_V_we0,
        x_io_V_d0 => grp_ProxGS_fu_267_x_io_V_d0,
        x_io_V_q0 => x_bar_V_q0,
        coe_a_M_real_V_address0 => grp_ProxGS_fu_267_coe_a_M_real_V_address0,
        coe_a_M_real_V_ce0 => grp_ProxGS_fu_267_coe_a_M_real_V_ce0,
        coe_a_M_real_V_q0 => coe_a_M_real_V_q0,
        coe_a_M_imag_V_address0 => grp_ProxGS_fu_267_coe_a_M_imag_V_address0,
        coe_a_M_imag_V_ce0 => grp_ProxGS_fu_267_coe_a_M_imag_V_ce0,
        coe_a_M_imag_V_q0 => coe_a_M_imag_V_q0,
        coe_b_V_address0 => grp_ProxGS_fu_267_coe_b_V_address0,
        coe_b_V_ce0 => grp_ProxGS_fu_267_coe_b_V_ce0,
        coe_b_V_q0 => coe_b_V_q0);

    grp_Relax_fu_278 : component Relax
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Relax_fu_278_ap_start,
        ap_done => grp_Relax_fu_278_ap_done,
        ap_idle => grp_Relax_fu_278_ap_idle,
        ap_ready => grp_Relax_fu_278_ap_ready,
        x_V_address0 => grp_Relax_fu_278_x_V_address0,
        x_V_ce0 => grp_Relax_fu_278_x_V_ce0,
        x_V_q0 => x_V_q0,
        x_old_V_address0 => grp_Relax_fu_278_x_old_V_address0,
        x_old_V_ce0 => grp_Relax_fu_278_x_old_V_ce0,
        x_old_V_q0 => x_old_V_q0,
        x_bar_V_address0 => grp_Relax_fu_278_x_bar_V_address0,
        x_bar_V_ce0 => grp_Relax_fu_278_x_bar_V_ce0,
        x_bar_V_we0 => grp_Relax_fu_278_x_bar_V_we0,
        x_bar_V_d0 => grp_Relax_fu_278_x_bar_V_d0);

    grp_array_copy_fu_285 : component array_copy
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_array_copy_fu_285_ap_start,
        ap_done => grp_array_copy_fu_285_ap_done,
        ap_idle => grp_array_copy_fu_285_ap_idle,
        ap_ready => grp_array_copy_fu_285_ap_ready,
        data_in_V_address0 => grp_array_copy_fu_285_data_in_V_address0,
        data_in_V_ce0 => grp_array_copy_fu_285_data_in_V_ce0,
        data_in_V_q0 => grp_array_copy_fu_285_data_in_V_q0,
        data_out_V_address0 => grp_array_copy_fu_285_data_out_V_address0,
        data_out_V_ce0 => grp_array_copy_fu_285_data_out_V_ce0,
        data_out_V_we0 => grp_array_copy_fu_285_data_out_V_we0,
        data_out_V_d0 => grp_array_copy_fu_285_data_out_V_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_ProxGS_fu_267_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_ProxGS_fu_267_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_ProxGS_fu_267_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_ProxGS_fu_267_ap_ready = ap_const_logic_1)) then 
                    grp_ProxGS_fu_267_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Relax_fu_278_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Relax_fu_278_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_Relax_fu_278_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Relax_fu_278_ap_ready = ap_const_logic_1)) then 
                    grp_Relax_fu_278_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_array_copy_fu_285_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_array_copy_fu_285_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln61_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_array_copy_fu_285_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_array_copy_fu_285_ap_ready = ap_const_logic_1)) then 
                    grp_array_copy_fu_285_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_my_filter_v1_fu_253_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_my_filter_v1_fu_253_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln61_fu_372_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_my_filter_v1_fu_253_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_my_filter_v1_fu_253_ap_ready = ap_const_logic_1)) then 
                    grp_my_filter_v1_fu_253_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                indvar_flatten_reg_209 <= add_ln24_fu_299_p2;
            elsif (((grp_array_copy_fu_285_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvar_flatten_reg_209 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    k_0_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                k_0_reg_242 <= ap_const_lv6_0;
            elsif (((grp_Relax_fu_278_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                k_0_reg_242 <= k_reg_405;
            end if; 
        end if;
    end process;

    x_0_i_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x_0_i_reg_231 <= x_fu_366_p2;
            elsif (((grp_array_copy_fu_285_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_0_i_reg_231 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    y_0_i_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                y_0_i_reg_220 <= select_ln29_1_fu_325_p3;
            elsif (((grp_array_copy_fu_285_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                y_0_i_reg_220 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                k_reg_405 <= k_fu_378_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln24_fu_293_p2, ap_CS_fsm_state7, grp_ProxGS_fu_267_ap_done, grp_Relax_fu_278_ap_done, grp_array_copy_fu_285_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state12, icmp_ln61_fu_372_p2, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state2, ap_block_state8_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_array_copy_fu_285_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_array_copy_fu_285_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln24_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln61_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_boolean_0 = ap_block_state8_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((grp_ProxGS_fu_267_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_Relax_fu_278_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    Img_V_address0 <= grp_array_copy_fu_285_data_in_V_address0;

    Img_V_ce0_assign_proc : process(grp_array_copy_fu_285_data_in_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            Img_V_ce0 <= grp_array_copy_fu_285_data_in_V_ce0;
        else 
            Img_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln180_fu_349_p2 <= std_logic_vector(unsigned(zext_ln180_fu_345_p1) + unsigned(zext_ln27_fu_341_p1));
    add_ln24_fu_299_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_209) + unsigned(ap_const_lv15_1));
    adjChImg_V_address0 <= grp_my_filter_v1_fu_253_adjChImg_V_address0;
    adjChImg_V_address1 <= grp_my_filter_v1_fu_253_adjChImg_V_address1;
    adjChImg_V_ce0 <= grp_my_filter_v1_fu_253_adjChImg_V_ce0;
    adjChImg_V_ce1 <= grp_my_filter_v1_fu_253_adjChImg_V_ce1;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state8_on_subcall_done_assign_proc : process(grp_my_filter_v1_fu_253_ap_done, grp_array_copy_fu_285_ap_done)
    begin
                ap_block_state8_on_subcall_done <= ((grp_array_copy_fu_285_ap_done = ap_const_logic_0) or (grp_my_filter_v1_fu_253_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state7, icmp_ln61_fu_372_p2)
    begin
        if (((icmp_ln61_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln61_fu_372_p2)
    begin
        if (((icmp_ln61_fu_372_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    coe_a_M_imag_V_address0 <= grp_ProxGS_fu_267_coe_a_M_imag_V_address0;
    coe_a_M_imag_V_ce0 <= grp_ProxGS_fu_267_coe_a_M_imag_V_ce0;
    coe_a_M_real_V_address0 <= grp_ProxGS_fu_267_coe_a_M_real_V_address0;
    coe_a_M_real_V_ce0 <= grp_ProxGS_fu_267_coe_a_M_real_V_ce0;
    coe_b_V_address0 <= grp_ProxGS_fu_267_coe_b_V_address0;
    coe_b_V_ce0 <= grp_ProxGS_fu_267_coe_b_V_ce0;
    grp_ProxGS_fu_267_ap_start <= grp_ProxGS_fu_267_ap_start_reg;
    grp_Relax_fu_278_ap_start <= grp_Relax_fu_278_ap_start_reg;
    grp_array_copy_fu_285_ap_start <= grp_array_copy_fu_285_ap_start_reg;

    grp_array_copy_fu_285_data_in_V_q0_assign_proc : process(Img_V_q0, x_V_q0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_array_copy_fu_285_data_in_V_q0 <= x_V_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_array_copy_fu_285_data_in_V_q0 <= Img_V_q0;
        else 
            grp_array_copy_fu_285_data_in_V_q0 <= "XXXXXXXX";
        end if; 
    end process;

    grp_my_filter_v1_fu_253_ap_start <= grp_my_filter_v1_fu_253_ap_start_reg;
    icmp_ln24_fu_293_p2 <= "1" when (indvar_flatten_reg_209 = ap_const_lv15_4000) else "0";
    icmp_ln26_fu_311_p2 <= "1" when (x_0_i_reg_231 = ap_const_lv8_80) else "0";
    icmp_ln61_fu_372_p2 <= "1" when (k_0_reg_242 = ap_const_lv6_32) else "0";
    k_fu_378_p2 <= std_logic_vector(unsigned(k_0_reg_242) + unsigned(ap_const_lv6_1));
    select_ln29_1_fu_325_p3 <= 
        y_fu_305_p2 when (icmp_ln26_fu_311_p2(0) = '1') else 
        y_0_i_reg_220;
    select_ln29_fu_317_p3 <= 
        ap_const_lv8_0 when (icmp_ln26_fu_311_p2(0) = '1') else 
        x_0_i_reg_231;
    tmp_fu_333_p3 <= (select_ln29_1_fu_325_p3 & ap_const_lv7_0);

    x_V_address0_assign_proc : process(grp_Relax_fu_278_x_V_address0, grp_array_copy_fu_285_data_in_V_address0, grp_array_copy_fu_285_data_out_V_address0, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_V_address0 <= grp_array_copy_fu_285_data_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_V_address0 <= grp_array_copy_fu_285_data_in_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x_V_address0 <= grp_Relax_fu_278_x_V_address0;
        else 
            x_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    x_V_ce0_assign_proc : process(grp_Relax_fu_278_x_V_ce0, grp_array_copy_fu_285_data_in_V_ce0, grp_array_copy_fu_285_data_out_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state12, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_V_ce0 <= grp_array_copy_fu_285_data_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_V_ce0 <= grp_array_copy_fu_285_data_in_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x_V_ce0 <= grp_Relax_fu_278_x_V_ce0;
        else 
            x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_V_we0_assign_proc : process(grp_array_copy_fu_285_data_out_V_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_V_we0 <= grp_array_copy_fu_285_data_out_V_we0;
        else 
            x_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x_bar_V_address0_assign_proc : process(grp_my_filter_v1_fu_253_f_V_address0, grp_ProxGS_fu_267_x_io_V_address0, grp_Relax_fu_278_x_bar_V_address0, grp_array_copy_fu_285_data_out_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_bar_V_address0 <= grp_array_copy_fu_285_data_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x_bar_V_address0 <= grp_Relax_fu_278_x_bar_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_bar_V_address0 <= grp_ProxGS_fu_267_x_io_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_bar_V_address0 <= grp_my_filter_v1_fu_253_f_V_address0;
        else 
            x_bar_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    x_bar_V_ce0_assign_proc : process(grp_my_filter_v1_fu_253_f_V_ce0, grp_ProxGS_fu_267_x_io_V_ce0, grp_Relax_fu_278_x_bar_V_ce0, grp_array_copy_fu_285_data_out_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_bar_V_ce0 <= grp_array_copy_fu_285_data_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x_bar_V_ce0 <= grp_Relax_fu_278_x_bar_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_bar_V_ce0 <= grp_ProxGS_fu_267_x_io_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_bar_V_ce0 <= grp_my_filter_v1_fu_253_f_V_ce0;
        else 
            x_bar_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_bar_V_ce1_assign_proc : process(grp_my_filter_v1_fu_253_f_V_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_bar_V_ce1 <= grp_my_filter_v1_fu_253_f_V_ce1;
        else 
            x_bar_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_bar_V_d0_assign_proc : process(grp_ProxGS_fu_267_x_io_V_d0, grp_Relax_fu_278_x_bar_V_d0, grp_array_copy_fu_285_data_out_V_d0, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_bar_V_d0 <= grp_array_copy_fu_285_data_out_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x_bar_V_d0 <= grp_Relax_fu_278_x_bar_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_bar_V_d0 <= grp_ProxGS_fu_267_x_io_V_d0;
        else 
            x_bar_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    x_bar_V_we0_assign_proc : process(grp_ProxGS_fu_267_x_io_V_we0, grp_Relax_fu_278_x_bar_V_we0, grp_array_copy_fu_285_data_out_V_we0, ap_CS_fsm_state12, ap_CS_fsm_state10, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_bar_V_we0 <= grp_array_copy_fu_285_data_out_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x_bar_V_we0 <= grp_Relax_fu_278_x_bar_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_bar_V_we0 <= grp_ProxGS_fu_267_x_io_V_we0;
        else 
            x_bar_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x_bar_V_we1_assign_proc : process(grp_my_filter_v1_fu_253_f_V_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_bar_V_we1 <= grp_my_filter_v1_fu_253_f_V_we1;
        else 
            x_bar_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    x_fu_366_p2 <= std_logic_vector(unsigned(select_ln29_fu_317_p3) + unsigned(ap_const_lv8_1));

    x_old_V_address0_assign_proc : process(grp_Relax_fu_278_x_old_V_address0, grp_array_copy_fu_285_data_out_V_address0, ap_CS_fsm_state12, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_old_V_address0 <= grp_array_copy_fu_285_data_out_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x_old_V_address0 <= grp_Relax_fu_278_x_old_V_address0;
        else 
            x_old_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    x_old_V_ce0_assign_proc : process(grp_Relax_fu_278_x_old_V_ce0, grp_array_copy_fu_285_data_out_V_ce0, ap_CS_fsm_state12, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_old_V_ce0 <= grp_array_copy_fu_285_data_out_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            x_old_V_ce0 <= grp_Relax_fu_278_x_old_V_ce0;
        else 
            x_old_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_old_V_we0_assign_proc : process(grp_array_copy_fu_285_data_out_V_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_old_V_we0 <= grp_array_copy_fu_285_data_out_V_we0;
        else 
            x_old_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_1_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g1_V_address0, ap_CS_fsm_state8, zext_ln180_3_fu_355_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_1_V_address0 <= zext_ln180_3_fu_355_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_1_V_address0 <= grp_my_filter_v1_fu_253_g1_V_address0;
        else 
            y_1_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_1_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g1_V_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_1_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_1_V_ce0 <= grp_my_filter_v1_fu_253_g1_V_ce0;
        else 
            y_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_1_V_ce1_assign_proc : process(grp_my_filter_v1_fu_253_g1_V_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_1_V_ce1 <= grp_my_filter_v1_fu_253_g1_V_ce1;
        else 
            y_1_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_1_V_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g1_V_d0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_1_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_1_V_d0 <= grp_my_filter_v1_fu_253_g1_V_d0;
        else 
            y_1_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    y_1_V_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln24_fu_293_p2, grp_my_filter_v1_fu_253_g1_V_we0, ap_CS_fsm_state8)
    begin
        if (((icmp_ln24_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_1_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_1_V_we0 <= grp_my_filter_v1_fu_253_g1_V_we0;
        else 
            y_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_1_V_we1_assign_proc : process(grp_my_filter_v1_fu_253_g1_V_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_1_V_we1 <= grp_my_filter_v1_fu_253_g1_V_we1;
        else 
            y_1_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    y_2_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g2_V_address0, ap_CS_fsm_state8, zext_ln180_3_fu_355_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_2_V_address0 <= zext_ln180_3_fu_355_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_2_V_address0 <= grp_my_filter_v1_fu_253_g2_V_address0;
        else 
            y_2_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_2_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g2_V_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_2_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_2_V_ce0 <= grp_my_filter_v1_fu_253_g2_V_ce0;
        else 
            y_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_2_V_ce1_assign_proc : process(grp_my_filter_v1_fu_253_g2_V_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_2_V_ce1 <= grp_my_filter_v1_fu_253_g2_V_ce1;
        else 
            y_2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_2_V_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g2_V_d0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_2_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_2_V_d0 <= grp_my_filter_v1_fu_253_g2_V_d0;
        else 
            y_2_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    y_2_V_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln24_fu_293_p2, grp_my_filter_v1_fu_253_g2_V_we0, ap_CS_fsm_state8)
    begin
        if (((icmp_ln24_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_2_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_2_V_we0 <= grp_my_filter_v1_fu_253_g2_V_we0;
        else 
            y_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_2_V_we1_assign_proc : process(grp_my_filter_v1_fu_253_g2_V_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_2_V_we1 <= grp_my_filter_v1_fu_253_g2_V_we1;
        else 
            y_2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    y_3_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g3_V_address0, ap_CS_fsm_state8, zext_ln180_3_fu_355_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_3_V_address0 <= zext_ln180_3_fu_355_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_3_V_address0 <= grp_my_filter_v1_fu_253_g3_V_address0;
        else 
            y_3_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_3_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g3_V_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_3_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_3_V_ce0 <= grp_my_filter_v1_fu_253_g3_V_ce0;
        else 
            y_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_3_V_ce1_assign_proc : process(grp_my_filter_v1_fu_253_g3_V_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_3_V_ce1 <= grp_my_filter_v1_fu_253_g3_V_ce1;
        else 
            y_3_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_3_V_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g3_V_d0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_3_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_3_V_d0 <= grp_my_filter_v1_fu_253_g3_V_d0;
        else 
            y_3_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    y_3_V_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln24_fu_293_p2, grp_my_filter_v1_fu_253_g3_V_we0, ap_CS_fsm_state8)
    begin
        if (((icmp_ln24_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_3_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_3_V_we0 <= grp_my_filter_v1_fu_253_g3_V_we0;
        else 
            y_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_3_V_we1_assign_proc : process(grp_my_filter_v1_fu_253_g3_V_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_3_V_we1 <= grp_my_filter_v1_fu_253_g3_V_we1;
        else 
            y_3_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    y_4_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g4_V_address0, ap_CS_fsm_state8, zext_ln180_3_fu_355_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_4_V_address0 <= zext_ln180_3_fu_355_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_4_V_address0 <= grp_my_filter_v1_fu_253_g4_V_address0;
        else 
            y_4_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_4_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g4_V_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_4_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_4_V_ce0 <= grp_my_filter_v1_fu_253_g4_V_ce0;
        else 
            y_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_4_V_ce1_assign_proc : process(grp_my_filter_v1_fu_253_g4_V_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_4_V_ce1 <= grp_my_filter_v1_fu_253_g4_V_ce1;
        else 
            y_4_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_4_V_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g4_V_d0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_4_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_4_V_d0 <= grp_my_filter_v1_fu_253_g4_V_d0;
        else 
            y_4_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    y_4_V_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln24_fu_293_p2, grp_my_filter_v1_fu_253_g4_V_we0, ap_CS_fsm_state8)
    begin
        if (((icmp_ln24_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_4_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_4_V_we0 <= grp_my_filter_v1_fu_253_g4_V_we0;
        else 
            y_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_4_V_we1_assign_proc : process(grp_my_filter_v1_fu_253_g4_V_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_4_V_we1 <= grp_my_filter_v1_fu_253_g4_V_we1;
        else 
            y_4_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    y_5_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g5_V_address0, ap_CS_fsm_state8, zext_ln180_3_fu_355_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_5_V_address0 <= zext_ln180_3_fu_355_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_5_V_address0 <= grp_my_filter_v1_fu_253_g5_V_address0;
        else 
            y_5_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_5_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g5_V_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_5_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_5_V_ce0 <= grp_my_filter_v1_fu_253_g5_V_ce0;
        else 
            y_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_5_V_ce1_assign_proc : process(grp_my_filter_v1_fu_253_g5_V_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_5_V_ce1 <= grp_my_filter_v1_fu_253_g5_V_ce1;
        else 
            y_5_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_5_V_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g5_V_d0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_5_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_5_V_d0 <= grp_my_filter_v1_fu_253_g5_V_d0;
        else 
            y_5_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    y_5_V_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln24_fu_293_p2, grp_my_filter_v1_fu_253_g5_V_we0, ap_CS_fsm_state8)
    begin
        if (((icmp_ln24_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_5_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_5_V_we0 <= grp_my_filter_v1_fu_253_g5_V_we0;
        else 
            y_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_5_V_we1_assign_proc : process(grp_my_filter_v1_fu_253_g5_V_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_5_V_we1 <= grp_my_filter_v1_fu_253_g5_V_we1;
        else 
            y_5_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    y_6_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g6_V_address0, ap_CS_fsm_state8, zext_ln180_3_fu_355_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_6_V_address0 <= zext_ln180_3_fu_355_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_6_V_address0 <= grp_my_filter_v1_fu_253_g6_V_address0;
        else 
            y_6_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_6_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g6_V_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_6_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_6_V_ce0 <= grp_my_filter_v1_fu_253_g6_V_ce0;
        else 
            y_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_6_V_ce1_assign_proc : process(grp_my_filter_v1_fu_253_g6_V_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_6_V_ce1 <= grp_my_filter_v1_fu_253_g6_V_ce1;
        else 
            y_6_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_6_V_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g6_V_d0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_6_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_6_V_d0 <= grp_my_filter_v1_fu_253_g6_V_d0;
        else 
            y_6_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    y_6_V_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln24_fu_293_p2, grp_my_filter_v1_fu_253_g6_V_we0, ap_CS_fsm_state8)
    begin
        if (((icmp_ln24_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_6_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_6_V_we0 <= grp_my_filter_v1_fu_253_g6_V_we0;
        else 
            y_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_6_V_we1_assign_proc : process(grp_my_filter_v1_fu_253_g6_V_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_6_V_we1 <= grp_my_filter_v1_fu_253_g6_V_we1;
        else 
            y_6_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    y_7_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g7_V_address0, ap_CS_fsm_state8, zext_ln180_3_fu_355_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_7_V_address0 <= zext_ln180_3_fu_355_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_7_V_address0 <= grp_my_filter_v1_fu_253_g7_V_address0;
        else 
            y_7_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    y_7_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g7_V_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_7_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_7_V_ce0 <= grp_my_filter_v1_fu_253_g7_V_ce0;
        else 
            y_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_7_V_ce1_assign_proc : process(grp_my_filter_v1_fu_253_g7_V_ce1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_7_V_ce1 <= grp_my_filter_v1_fu_253_g7_V_ce1;
        else 
            y_7_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_7_V_d0_assign_proc : process(ap_CS_fsm_state5, grp_my_filter_v1_fu_253_g7_V_d0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_7_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_7_V_d0 <= grp_my_filter_v1_fu_253_g7_V_d0;
        else 
            y_7_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    y_7_V_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln24_fu_293_p2, grp_my_filter_v1_fu_253_g7_V_we0, ap_CS_fsm_state8)
    begin
        if (((icmp_ln24_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            y_7_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_7_V_we0 <= grp_my_filter_v1_fu_253_g7_V_we0;
        else 
            y_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y_7_V_we1_assign_proc : process(grp_my_filter_v1_fu_253_g7_V_we1, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_7_V_we1 <= grp_my_filter_v1_fu_253_g7_V_we1;
        else 
            y_7_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    y_fu_305_p2 <= std_logic_vector(unsigned(y_0_i_reg_220) + unsigned(ap_const_lv8_1));
    zext_ln180_3_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_fu_349_p2),64));
    zext_ln180_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_fu_317_p3),16));
    zext_ln27_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_333_p3),16));
end behav;
