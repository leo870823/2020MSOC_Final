// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dummy_proc_be_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dummy_proc_be_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dummy_proc_be_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> dummy_proc_be_1::ap_ST_fsm_state1 = "1";
const sc_lv<2> dummy_proc_be_1::ap_ST_fsm_state2 = "10";
const sc_lv<32> dummy_proc_be_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> dummy_proc_be_1::ap_const_lv32_1 = "1";
const sc_lv<1> dummy_proc_be_1::ap_const_lv1_0 = "0";
const sc_lv<8> dummy_proc_be_1::ap_const_lv8_0 = "00000000";
const sc_lv<8> dummy_proc_be_1::ap_const_lv8_80 = "10000000";
const sc_lv<8> dummy_proc_be_1::ap_const_lv8_1 = "1";
const sc_lv<1> dummy_proc_be_1::ap_const_lv1_1 = "1";
const bool dummy_proc_be_1::ap_const_boolean_1 = true;

dummy_proc_be_1::dummy_proc_be_1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( in_r_empty_n );
    sensitive << ( icmp_ln160_fu_71_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( in_r_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln160_fu_71_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( in_r_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln160_fu_71_p2 );

    SC_METHOD(thread_i_fu_77_p2);
    sensitive << ( i_0_reg_60 );

    SC_METHOD(thread_icmp_ln160_fu_71_p2);
    sensitive << ( in_r_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln160_fu_71_p2 );
    sensitive << ( i_0_reg_60 );

    SC_METHOD(thread_in_r_blk_n);
    sensitive << ( in_r_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln160_fu_71_p2 );

    SC_METHOD(thread_in_r_read);
    sensitive << ( in_r_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln160_fu_71_p2 );

    SC_METHOD(thread_out_r_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln161_fu_83_p1 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( in_r_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln160_fu_71_p2 );

    SC_METHOD(thread_out_r_d0);
    sensitive << ( in_r_dout );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( in_r_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln160_fu_71_p2 );

    SC_METHOD(thread_zext_ln161_fu_83_p1);
    sensitive << ( i_0_reg_60 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_r_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln160_fu_71_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dummy_proc_be_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_r_dout, "(port)in_r_dout");
    sc_trace(mVcdFile, in_r_empty_n, "(port)in_r_empty_n");
    sc_trace(mVcdFile, in_r_read, "(port)in_r_read");
    sc_trace(mVcdFile, out_r_address0, "(port)out_r_address0");
    sc_trace(mVcdFile, out_r_ce0, "(port)out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "(port)out_r_we0");
    sc_trace(mVcdFile, out_r_d0, "(port)out_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in_r_blk_n, "in_r_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln160_fu_71_p2, "icmp_ln160_fu_71_p2");
    sc_trace(mVcdFile, i_fu_77_p2, "i_fu_77_p2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, i_0_reg_60, "i_0_reg_60");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, zext_ln161_fu_83_p1, "zext_ln161_fu_83_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

dummy_proc_be_1::~dummy_proc_be_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void dummy_proc_be_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    !(esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_r_empty_n.read())) && 
                    esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_r_empty_n.read())))) {
        i_0_reg_60 = i_fu_77_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_0_reg_60 = ap_const_lv8_0;
    }
}

void dummy_proc_be_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void dummy_proc_be_1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void dummy_proc_be_1::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void dummy_proc_be_1::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_r_empty_n.read()));
}

void dummy_proc_be_1::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_r_empty_n.read())) && 
         esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void dummy_proc_be_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dummy_proc_be_1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_r_empty_n.read())) && 
         esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dummy_proc_be_1::thread_i_fu_77_p2() {
    i_fu_77_p2 = (!i_0_reg_60.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(i_0_reg_60.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void dummy_proc_be_1::thread_icmp_ln160_fu_71_p2() {
    icmp_ln160_fu_71_p2 = (!i_0_reg_60.read().is_01() || !ap_const_lv8_80.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_60.read() == ap_const_lv8_80);
}

void dummy_proc_be_1::thread_in_r_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_0))) {
        in_r_blk_n = in_r_empty_n.read();
    } else {
        in_r_blk_n = ap_const_logic_1;
    }
}

void dummy_proc_be_1::thread_in_r_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_r_empty_n.read())))) {
        in_r_read = ap_const_logic_1;
    } else {
        in_r_read = ap_const_logic_0;
    }
}

void dummy_proc_be_1::thread_out_r_address0() {
    out_r_address0 =  (sc_lv<7>) (zext_ln161_fu_83_p1.read());
}

void dummy_proc_be_1::thread_out_r_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_r_empty_n.read())))) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void dummy_proc_be_1::thread_out_r_d0() {
    out_r_d0 = in_r_dout.read();
}

void dummy_proc_be_1::thread_out_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_r_empty_n.read())))) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void dummy_proc_be_1::thread_zext_ln161_fu_83_p1() {
    zext_ln161_fu_83_p1 = esl_zext<64,8>(i_0_reg_60.read());
}

void dummy_proc_be_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_r_empty_n.read())) && esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln160_fu_71_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, in_r_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

