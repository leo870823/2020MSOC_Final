// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dummy_proc_fe_1_HH_
#define _dummy_proc_fe_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct dummy_proc_fe_1 : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<1> > direction;
    sc_in< sc_lv<16> > config_data_V_dout;
    sc_in< sc_logic > config_data_V_empty_n;
    sc_out< sc_logic > config_data_V_read;
    sc_out< sc_lv<16> > config_data_V_din;
    sc_in< sc_logic > config_data_V_full_n;
    sc_out< sc_logic > config_data_V_write;
    sc_out< sc_lv<7> > in_r_address0;
    sc_out< sc_logic > in_r_ce0;
    sc_in< sc_lv<64> > in_r_q0;
    sc_out< sc_lv<64> > out_r_din;
    sc_in< sc_logic > out_r_full_n;
    sc_out< sc_logic > out_r_write;


    // Module declarations
    dummy_proc_fe_1(sc_module_name name);
    SC_HAS_PROCESS(dummy_proc_fe_1);

    ~dummy_proc_fe_1();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > config_data_V_i_blk_n;
    sc_signal< sc_logic > config_data_V_o_blk_n;
    sc_signal< sc_logic > out_r_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > i_fu_148_p2;
    sc_signal< sc_lv<8> > i_reg_162;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln149_fu_142_p2;
    sc_signal< sc_lv<8> > i_0_reg_110;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<64> > zext_ln150_fu_154_p1;
    sc_signal< sc_lv<9> > tmp_fu_121_p3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<8> ap_const_lv8_AB;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_config_data_V_din();
    void thread_config_data_V_i_blk_n();
    void thread_config_data_V_o_blk_n();
    void thread_config_data_V_read();
    void thread_config_data_V_write();
    void thread_i_fu_148_p2();
    void thread_icmp_ln149_fu_142_p2();
    void thread_in_r_address0();
    void thread_in_r_ce0();
    void thread_internal_ap_ready();
    void thread_out_r_blk_n();
    void thread_out_r_din();
    void thread_out_r_write();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_fu_121_p3();
    void thread_zext_ln150_fu_154_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
