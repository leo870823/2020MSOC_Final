// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dummy_proc_fe_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dummy_proc_fe_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dummy_proc_fe_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> dummy_proc_fe_1::ap_ST_fsm_state1 = "1";
const sc_lv<3> dummy_proc_fe_1::ap_ST_fsm_state2 = "10";
const sc_lv<3> dummy_proc_fe_1::ap_ST_fsm_state3 = "100";
const sc_lv<32> dummy_proc_fe_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> dummy_proc_fe_1::ap_const_lv32_2 = "10";
const sc_lv<32> dummy_proc_fe_1::ap_const_lv32_1 = "1";
const sc_lv<15> dummy_proc_fe_1::ap_const_lv15_0 = "000000000000000";
const sc_lv<10> dummy_proc_fe_1::ap_const_lv10_2AB = "1010101011";
const sc_lv<32> dummy_proc_fe_1::ap_const_lv32_A = "1010";
const sc_lv<15> dummy_proc_fe_1::ap_const_lv15_4000 = "100000000000000";
const sc_lv<15> dummy_proc_fe_1::ap_const_lv15_1 = "1";
const sc_lv<1> dummy_proc_fe_1::ap_const_lv1_1 = "1";
const bool dummy_proc_fe_1::ap_const_boolean_1 = true;

dummy_proc_fe_1::dummy_proc_fe_1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( config_data_V_empty_n );
    sensitive << ( config_data_V_full_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln149_fu_144_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_config_data_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( config_data_V_dout );
    sensitive << ( config_data_V_empty_n );
    sensitive << ( config_data_V_full_n );
    sensitive << ( tmp_fu_123_p3 );

    SC_METHOD(thread_config_data_V_i_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( config_data_V_empty_n );

    SC_METHOD(thread_config_data_V_o_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( config_data_V_full_n );

    SC_METHOD(thread_config_data_V_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( config_data_V_empty_n );
    sensitive << ( config_data_V_full_n );

    SC_METHOD(thread_config_data_V_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( config_data_V_empty_n );
    sensitive << ( config_data_V_full_n );

    SC_METHOD(thread_i_fu_150_p2);
    sensitive << ( i_0_reg_112 );

    SC_METHOD(thread_icmp_ln149_fu_144_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_112 );

    SC_METHOD(thread_in_r_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln150_fu_156_p1 );

    SC_METHOD(thread_in_r_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln149_fu_144_p2 );

    SC_METHOD(thread_out_r_blk_n);
    sensitive << ( out_r_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_r_din);
    sensitive << ( in_r_q0 );
    sensitive << ( out_r_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_out_r_write);
    sensitive << ( out_r_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_fu_123_p3);
    sensitive << ( direction );

    SC_METHOD(thread_zext_ln150_fu_156_p1);
    sensitive << ( i_0_reg_112 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( config_data_V_empty_n );
    sensitive << ( config_data_V_full_n );
    sensitive << ( out_r_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln149_fu_144_p2 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dummy_proc_fe_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, direction, "(port)direction");
    sc_trace(mVcdFile, config_data_V_dout, "(port)config_data_V_dout");
    sc_trace(mVcdFile, config_data_V_empty_n, "(port)config_data_V_empty_n");
    sc_trace(mVcdFile, config_data_V_read, "(port)config_data_V_read");
    sc_trace(mVcdFile, config_data_V_din, "(port)config_data_V_din");
    sc_trace(mVcdFile, config_data_V_full_n, "(port)config_data_V_full_n");
    sc_trace(mVcdFile, config_data_V_write, "(port)config_data_V_write");
    sc_trace(mVcdFile, in_r_address0, "(port)in_r_address0");
    sc_trace(mVcdFile, in_r_ce0, "(port)in_r_ce0");
    sc_trace(mVcdFile, in_r_q0, "(port)in_r_q0");
    sc_trace(mVcdFile, out_r_din, "(port)out_r_din");
    sc_trace(mVcdFile, out_r_full_n, "(port)out_r_full_n");
    sc_trace(mVcdFile, out_r_write, "(port)out_r_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, config_data_V_i_blk_n, "config_data_V_i_blk_n");
    sc_trace(mVcdFile, config_data_V_o_blk_n, "config_data_V_o_blk_n");
    sc_trace(mVcdFile, out_r_blk_n, "out_r_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_fu_150_p2, "i_fu_150_p2");
    sc_trace(mVcdFile, i_reg_164, "i_reg_164");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln149_fu_144_p2, "icmp_ln149_fu_144_p2");
    sc_trace(mVcdFile, i_0_reg_112, "i_0_reg_112");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, zext_ln150_fu_156_p1, "zext_ln150_fu_156_p1");
    sc_trace(mVcdFile, tmp_fu_123_p3, "tmp_fu_123_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

dummy_proc_fe_1::~dummy_proc_fe_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void dummy_proc_fe_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(icmp_ln149_fu_144_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_r_full_n.read(), ap_const_logic_1))) {
        i_0_reg_112 = i_reg_164.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, config_data_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, config_data_V_full_n.read())))) {
        i_0_reg_112 = ap_const_lv15_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_164 = i_fu_150_p2.read();
    }
}

void dummy_proc_fe_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void dummy_proc_fe_1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void dummy_proc_fe_1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void dummy_proc_fe_1::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, config_data_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, config_data_V_full_n.read()));
}

void dummy_proc_fe_1::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln149_fu_144_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void dummy_proc_fe_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dummy_proc_fe_1::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void dummy_proc_fe_1::thread_config_data_V_din() {
    config_data_V_din = esl_partset<16,16,11,32,32>(config_data_V_dout.read(), tmp_fu_123_p3.read(), ap_const_lv32_0, ap_const_lv32_A);
}

void dummy_proc_fe_1::thread_config_data_V_i_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        config_data_V_i_blk_n = config_data_V_empty_n.read();
    } else {
        config_data_V_i_blk_n = ap_const_logic_1;
    }
}

void dummy_proc_fe_1::thread_config_data_V_o_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        config_data_V_o_blk_n = config_data_V_full_n.read();
    } else {
        config_data_V_o_blk_n = ap_const_logic_1;
    }
}

void dummy_proc_fe_1::thread_config_data_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, config_data_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, config_data_V_full_n.read())))) {
        config_data_V_read = ap_const_logic_1;
    } else {
        config_data_V_read = ap_const_logic_0;
    }
}

void dummy_proc_fe_1::thread_config_data_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, config_data_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, config_data_V_full_n.read())))) {
        config_data_V_write = ap_const_logic_1;
    } else {
        config_data_V_write = ap_const_logic_0;
    }
}

void dummy_proc_fe_1::thread_i_fu_150_p2() {
    i_fu_150_p2 = (!i_0_reg_112.read().is_01() || !ap_const_lv15_1.is_01())? sc_lv<15>(): (sc_biguint<15>(i_0_reg_112.read()) + sc_biguint<15>(ap_const_lv15_1));
}

void dummy_proc_fe_1::thread_icmp_ln149_fu_144_p2() {
    icmp_ln149_fu_144_p2 = (!i_0_reg_112.read().is_01() || !ap_const_lv15_4000.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_112.read() == ap_const_lv15_4000);
}

void dummy_proc_fe_1::thread_in_r_address0() {
    in_r_address0 =  (sc_lv<14>) (zext_ln150_fu_156_p1.read());
}

void dummy_proc_fe_1::thread_in_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_r_ce0 = ap_const_logic_1;
    } else {
        in_r_ce0 = ap_const_logic_0;
    }
}

void dummy_proc_fe_1::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln149_fu_144_p2.read(), ap_const_lv1_1))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void dummy_proc_fe_1::thread_out_r_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        out_r_blk_n = out_r_full_n.read();
    } else {
        out_r_blk_n = ap_const_logic_1;
    }
}

void dummy_proc_fe_1::thread_out_r_din() {
    out_r_din = in_r_q0.read();
}

void dummy_proc_fe_1::thread_out_r_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(out_r_full_n.read(), ap_const_logic_1))) {
        out_r_write = ap_const_logic_1;
    } else {
        out_r_write = ap_const_logic_0;
    }
}

void dummy_proc_fe_1::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void dummy_proc_fe_1::thread_start_out() {
    start_out = real_start.read();
}

void dummy_proc_fe_1::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void dummy_proc_fe_1::thread_tmp_fu_123_p3() {
    tmp_fu_123_p3 = esl_concat<10,1>(ap_const_lv10_2AB, direction.read());
}

void dummy_proc_fe_1::thread_zext_ln150_fu_156_p1() {
    zext_ln150_fu_156_p1 = esl_zext<64,15>(i_0_reg_112.read());
}

void dummy_proc_fe_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, config_data_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, config_data_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln149_fu_144_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(out_r_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

