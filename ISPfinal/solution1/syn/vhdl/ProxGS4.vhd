-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ProxGS4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_io_V_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    x_io_V_ce0 : OUT STD_LOGIC;
    x_io_V_we0 : OUT STD_LOGIC;
    x_io_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_io_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    coe_a_M_real_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    coe_a_M_real_ce0 : OUT STD_LOGIC;
    coe_a_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    coe_a_M_imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    coe_a_M_imag_ce0 : OUT STD_LOGIC;
    coe_a_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    coe_b_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    coe_b_ce0 : OUT STD_LOGIC;
    coe_b_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ProxGS4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3D23D70A : STD_LOGIC_VECTOR (31 downto 0) := "00111101001000111101011100001010";
    constant ap_const_lv32_48000000 : STD_LOGIC_VECTOR (31 downto 0) := "01001000000000000000000000000000";
    constant ap_const_lv32_3C000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111100000000000000000000000000";
    constant ap_const_lv32_37000000 : STD_LOGIC_VECTOR (31 downto 0) := "00110111000000000000000000000000";
    constant ap_const_lv32_437F0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011011111110000000000000000";
    constant ap_const_lv64_406FE00000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001101111111000000000000000000000000000000000000000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_323 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_0_i_reg_334 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_i_reg_345 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten11_reg_356 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_0_reg_367 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_reg_378 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten23_reg_413 : STD_LOGIC_VECTOR (14 downto 0);
    signal y_0_i12_reg_424 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_0_i13_reg_435 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_542 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_block_state33_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state34_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state35_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state36_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state37_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state38_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state39_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state40_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state41_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state42_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state43_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state44_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_state45_pp1_stage0_iter12 : BOOLEAN;
    signal ap_block_state46_pp1_stage0_iter13 : BOOLEAN;
    signal ap_block_state47_pp1_stage0_iter14 : BOOLEAN;
    signal ap_block_state48_pp1_stage0_iter15 : BOOLEAN;
    signal ap_block_state49_pp1_stage0_iter16 : BOOLEAN;
    signal ap_block_state50_pp1_stage0_iter17 : BOOLEAN;
    signal ap_block_state51_pp1_stage0_iter18 : BOOLEAN;
    signal ap_block_state52_pp1_stage0_iter19 : BOOLEAN;
    signal ap_block_state53_pp1_stage0_iter20 : BOOLEAN;
    signal ap_block_state54_pp1_stage0_iter21 : BOOLEAN;
    signal ap_block_state55_pp1_stage0_iter22 : BOOLEAN;
    signal ap_block_state56_pp1_stage0_iter23 : BOOLEAN;
    signal ap_block_state57_pp1_stage0_iter24 : BOOLEAN;
    signal ap_block_state58_pp1_stage0_iter25 : BOOLEAN;
    signal ap_block_state59_pp1_stage0_iter26 : BOOLEAN;
    signal ap_block_state60_pp1_stage0_iter27 : BOOLEAN;
    signal ap_block_state61_pp1_stage0_iter28 : BOOLEAN;
    signal ap_block_state62_pp1_stage0_iter29 : BOOLEAN;
    signal ap_block_state63_pp1_stage0_iter30 : BOOLEAN;
    signal ap_block_state64_pp1_stage0_iter31 : BOOLEAN;
    signal ap_block_state65_pp1_stage0_iter32 : BOOLEAN;
    signal ap_block_state66_pp1_stage0_iter33 : BOOLEAN;
    signal ap_block_state67_pp1_stage0_iter34 : BOOLEAN;
    signal ap_block_state68_pp1_stage0_iter35 : BOOLEAN;
    signal ap_block_state69_pp1_stage0_iter36 : BOOLEAN;
    signal ap_block_state70_pp1_stage0_iter37 : BOOLEAN;
    signal ap_block_state71_pp1_stage0_iter38 : BOOLEAN;
    signal ap_block_state72_pp1_stage0_iter39 : BOOLEAN;
    signal ap_block_state73_pp1_stage0_iter40 : BOOLEAN;
    signal ap_block_state74_pp1_stage0_iter41 : BOOLEAN;
    signal ap_block_state75_pp1_stage0_iter42 : BOOLEAN;
    signal ap_block_state76_pp1_stage0_iter43 : BOOLEAN;
    signal ap_block_state77_pp1_stage0_iter44 : BOOLEAN;
    signal ap_block_state78_pp1_stage0_iter45 : BOOLEAN;
    signal ap_block_state79_pp1_stage0_iter46 : BOOLEAN;
    signal ap_block_state80_pp1_stage0_iter47 : BOOLEAN;
    signal ap_block_state81_pp1_stage0_iter48 : BOOLEAN;
    signal ap_block_state82_pp1_stage0_iter49 : BOOLEAN;
    signal ap_block_state83_pp1_stage0_iter50 : BOOLEAN;
    signal ap_block_state84_pp1_stage0_iter51 : BOOLEAN;
    signal ap_block_state85_pp1_stage0_iter52 : BOOLEAN;
    signal ap_block_state86_pp1_stage0_iter53 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln26_reg_1123 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state89_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state90_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state91_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state92_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state93_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state94_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state95_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state96_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state97_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state98_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state99_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_state100_pp2_stage0_iter11 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal icmp_ln68_reg_1276 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1276_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_548 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal icmp_ln68_reg_1276_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_fu_553_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln13_reg_1040 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln13_1_fu_559_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln13_2_fu_591_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln13_2_reg_1056 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln13_3_fu_597_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln13_2_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_3_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln54_reg_1074_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1074_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_fu_635_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln59_2_fu_661_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln59_2_reg_1083 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln555_2_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln555_2_reg_1088_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal x_1_fu_697_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_io_V_load_reg_1103 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_fu_484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_1113 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_479_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_assign_1_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln26_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal icmp_ln26_reg_1123_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1123_pp1_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_fu_713_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln32_1_fu_739_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_1_reg_1132 : STD_LOGIC_VECTOR (7 downto 0);
    signal coe_a_M_real_addr_reg_1137 : STD_LOGIC_VECTOR (13 downto 0);
    signal coe_a_M_real_addr_reg_1137_pp1_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal coe_a_M_real_addr_reg_1137_pp1_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal coe_a_M_imag_addr_reg_1142 : STD_LOGIC_VECTOR (13 downto 0);
    signal coe_a_M_imag_addr_reg_1142_pp1_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal coe_a_M_imag_addr_reg_1142_pp1_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152 : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter7_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter8_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter9_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter10_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter11_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter12_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter13_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter14_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter15_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter16_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter17_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter18_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter19_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter20_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter21_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter22_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter23_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter24_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter25_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter26_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter27_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter28_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter29_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter30_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter31_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter32_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter33_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter34_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter35_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter36_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter37_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter38_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter39_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter40_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter41_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter42_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter43_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter44_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter45_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter46_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter47_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter48_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter49_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter50_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter51_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_a_1_reg_1152_pp1_iter52_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158 : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter7_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter8_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter9_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter10_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter11_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter12_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter13_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter14_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter15_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter16_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter17_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter18_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter19_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter20_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter21_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter22_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter23_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter24_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter25_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter26_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter27_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter28_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter29_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter30_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter31_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter32_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter33_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter34_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter35_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter36_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter37_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter38_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter39_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter40_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter41_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter42_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter43_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter44_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter45_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter46_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter47_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter48_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter49_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter50_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter51_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_a_1_reg_1158_pp1_iter52_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal x_fu_778_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal coe_b_load_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal coe_b_load_reg_1169_pp1_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal coe_b_load_reg_1169_pp1_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal coe_b_load_reg_1169_pp1_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal coe_b_load_reg_1169_pp1_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal coe_b_load_reg_1169_pp1_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal coe_b_load_reg_1169_pp1_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal coe_b_load_reg_1169_pp1_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal coe_b_load_reg_1169_pp1_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal coe_b_load_reg_1169_pp1_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal coe_b_load_reg_1169_pp1_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal coe_b_load_reg_1169_pp1_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal coe_b_load_reg_1169_pp1_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln32_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1176_pp1_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal fft_result_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal fft_result_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_1190 : STD_LOGIC_VECTOR (63 downto 0);
    signal coe_a_M_real_load_reg_1195 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_1200 : STD_LOGIC_VECTOR (63 downto 0);
    signal coe_a_M_imag_load_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_524_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_1210 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_1215 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_529_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_1220 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_reg_1225 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_516_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_1230 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_1235 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_520_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_1241 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_reg_1246 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_538_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_1251 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_487_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data_re_reg_1256 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data_im_reg_1261 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln68_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal icmp_ln68_reg_1276_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1276_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1276_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1276_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1276_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1276_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1276_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_1276_pp2_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln68_fu_831_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln75_1_fu_857_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln75_1_reg_1285 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln321_5_fu_887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_reg_1290 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_reg_1290_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_reg_1290_pp2_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_reg_1290_pp2_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_reg_1290_pp2_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_reg_1290_pp2_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_reg_1290_pp2_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_reg_1290_pp2_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_reg_1290_pp2_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_reg_1290_pp2_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_5_reg_1290_pp2_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal x_2_fu_892_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_M_real_load_reg_1305 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal p_Result_s_reg_1310 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1312_fu_1020_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1312_reg_1315 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fft_top_2D_fu_446_ap_ready : STD_LOGIC;
    signal grp_fft_top_2D_fu_446_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state33 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter53 : STD_LOGIC := '0';
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state89 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal tmp_M_real_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_M_real_ce0 : STD_LOGIC;
    signal tmp_M_real_we0 : STD_LOGIC;
    signal tmp_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_M_imag_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_M_imag_ce0 : STD_LOGIC;
    signal tmp_M_imag_we0 : STD_LOGIC;
    signal tmp_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_result_M_real_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_real_ce0 : STD_LOGIC;
    signal fft_result_M_real_we0 : STD_LOGIC;
    signal fft_result_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_result_M_real_ce1 : STD_LOGIC;
    signal fft_result_M_real_we1 : STD_LOGIC;
    signal fft_result_M_imag_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal fft_result_M_imag_ce0 : STD_LOGIC;
    signal fft_result_M_imag_we0 : STD_LOGIC;
    signal fft_result_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fft_result_M_imag_ce1 : STD_LOGIC;
    signal fft_result_M_imag_we1 : STD_LOGIC;
    signal grp_fft_top_2D_fu_446_ap_start : STD_LOGIC;
    signal grp_fft_top_2D_fu_446_ap_idle : STD_LOGIC;
    signal grp_fft_top_2D_fu_446_direction : STD_LOGIC;
    signal grp_fft_top_2D_fu_446_in_M_real_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fft_top_2D_fu_446_in_M_real_ce0 : STD_LOGIC;
    signal grp_fft_top_2D_fu_446_in_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_top_2D_fu_446_in_M_imag_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fft_top_2D_fu_446_in_M_imag_ce0 : STD_LOGIC;
    signal grp_fft_top_2D_fu_446_in_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_top_2D_fu_446_out_M_real_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fft_top_2D_fu_446_out_M_real_ce0 : STD_LOGIC;
    signal grp_fft_top_2D_fu_446_out_M_real_we0 : STD_LOGIC;
    signal grp_fft_top_2D_fu_446_out_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_top_2D_fu_446_out_M_imag_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fft_top_2D_fu_446_out_M_imag_ce0 : STD_LOGIC;
    signal grp_fft_top_2D_fu_446_out_M_imag_we0 : STD_LOGIC;
    signal grp_fft_top_2D_fu_446_out_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln13_reg_277 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln13_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_1_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln13_1_reg_289 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_ln13_2_reg_300 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_ln13_3_reg_312 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_y_0_i_phi_fu_338_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_y_0_phi_fu_371_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_reg_pp1_iter0_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter1_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter2_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter3_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter4_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter5_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter6_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter7_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter8_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter9_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter10_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter11_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter12_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter13_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter14_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter15_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter16_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter17_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter18_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter19_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter20_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter21_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter22_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter23_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter24_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter25_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter26_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter27_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter28_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter29_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter30_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter31_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter32_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter33_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter34_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter35_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter36_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter37_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter38_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter39_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter40_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter41_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter42_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter43_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter44_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter45_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter46_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter47_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter48_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter49_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter50_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter51_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter52_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter53_phi_ln41_reg_389 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter0_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter1_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter2_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter3_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter4_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter5_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter6_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter7_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter8_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter9_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter10_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter11_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter12_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter13_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter14_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter15_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter16_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter17_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter18_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter19_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter20_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter21_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter22_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter23_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter24_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter25_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter26_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter27_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter28_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter29_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter30_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter31_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter32_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter33_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter34_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter35_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter36_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter37_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter38_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter39_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter40_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter41_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter42_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter43_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter44_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter45_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter46_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter47_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter48_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter49_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter50_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter51_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter52_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp1_iter53_phi_ln41_1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_y_0_i12_phi_fu_428_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal grp_fft_top_2D_fu_446_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal zext_ln1027_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_1_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1044_1_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_457_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_462_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_484_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_565_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_22_fu_603_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln56_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_641_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_669_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln59_1_fu_653_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln555_1_fu_681_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln57_fu_677_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln555_fu_685_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln28_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_719_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_747_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln32_fu_731_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln29_fu_755_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1044_fu_759_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1044_fu_763_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln32_fu_784_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_787_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_fu_797_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln32_1_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_fu_843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_2_fu_837_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_865_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln75_fu_849_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln71_fu_873_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln321_fu_877_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln321_fu_881_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_898_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_V_1_fu_920_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_V_fu_924_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_V_fu_910_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln339_fu_938_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln339_fu_942_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_956_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_948_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1311_fu_962_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_966_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_974_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_2_fu_978_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln682_fu_934_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1287_fu_982_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_986_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_25_fu_998_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_992_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln59_fu_1006_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_1010_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln59_fu_1028_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component fft_top_2D IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        direction : IN STD_LOGIC;
        in_M_real_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        in_M_real_ce0 : OUT STD_LOGIC;
        in_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        in_M_imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        in_M_imag_ce0 : OUT STD_LOGIC;
        in_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_M_real_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_M_real_ce0 : OUT STD_LOGIC;
        out_M_real_we0 : OUT STD_LOGIC;
        out_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_M_imag_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        out_M_imag_ce0 : OUT STD_LOGIC;
        out_M_imag_we0 : OUT STD_LOGIC;
        out_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DEBLUR_fmul_32ns_lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DEBLUR_fdiv_32ns_mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DEBLUR_sitofp_32nncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DEBLUR_fptrunc_64ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DEBLUR_fpext_32nspcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component DEBLUR_fcmp_32ns_qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component DEBLUR_dadd_64ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component DEBLUR_dmul_64ns_rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component DEBLUR_ddiv_64ns_sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ProxGS4_tmp_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ProxGS4_fft_resuljbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    tmp_M_real_U : component ProxGS4_tmp_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_M_real_address0,
        ce0 => tmp_M_real_ce0,
        we0 => tmp_M_real_we0,
        d0 => tmp_M_real_d0,
        q0 => tmp_M_real_q0);

    tmp_M_imag_U : component ProxGS4_tmp_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_M_imag_address0,
        ce0 => tmp_M_imag_ce0,
        we0 => tmp_M_imag_we0,
        d0 => tmp_M_imag_d0,
        q0 => tmp_M_imag_q0);

    fft_result_M_real_U : component ProxGS4_fft_resuljbC
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fft_result_M_real_address0,
        ce0 => fft_result_M_real_ce0,
        we0 => fft_result_M_real_we0,
        d0 => fft_result_M_real_d0,
        q0 => fft_result_M_real_q0,
        address1 => fft_result_M_real_a_1_reg_1152_pp1_iter52_reg,
        ce1 => fft_result_M_real_ce1,
        we1 => fft_result_M_real_we1,
        d1 => ap_phi_reg_pp1_iter53_phi_ln41_reg_389);

    fft_result_M_imag_U : component ProxGS4_fft_resuljbC
    generic map (
        DataWidth => 32,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fft_result_M_imag_address0,
        ce0 => fft_result_M_imag_ce0,
        we0 => fft_result_M_imag_we0,
        d0 => fft_result_M_imag_d0,
        q0 => fft_result_M_imag_q0,
        address1 => fft_result_M_imag_a_1_reg_1158_pp1_iter52_reg,
        ce1 => fft_result_M_imag_ce1,
        we1 => fft_result_M_imag_we1,
        d1 => ap_phi_reg_pp1_iter53_phi_ln41_1_reg_401);

    grp_fft_top_2D_fu_446 : component fft_top_2D
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft_top_2D_fu_446_ap_start,
        ap_done => grp_fft_top_2D_fu_446_ap_done,
        ap_idle => grp_fft_top_2D_fu_446_ap_idle,
        ap_ready => grp_fft_top_2D_fu_446_ap_ready,
        direction => grp_fft_top_2D_fu_446_direction,
        in_M_real_address0 => grp_fft_top_2D_fu_446_in_M_real_address0,
        in_M_real_ce0 => grp_fft_top_2D_fu_446_in_M_real_ce0,
        in_M_real_q0 => grp_fft_top_2D_fu_446_in_M_real_q0,
        in_M_imag_address0 => grp_fft_top_2D_fu_446_in_M_imag_address0,
        in_M_imag_ce0 => grp_fft_top_2D_fu_446_in_M_imag_ce0,
        in_M_imag_q0 => grp_fft_top_2D_fu_446_in_M_imag_q0,
        out_M_real_address0 => grp_fft_top_2D_fu_446_out_M_real_address0,
        out_M_real_ce0 => grp_fft_top_2D_fu_446_out_M_real_ce0,
        out_M_real_we0 => grp_fft_top_2D_fu_446_out_M_real_we0,
        out_M_real_d0 => grp_fft_top_2D_fu_446_out_M_real_d0,
        out_M_imag_address0 => grp_fft_top_2D_fu_446_out_M_imag_address0,
        out_M_imag_ce0 => grp_fft_top_2D_fu_446_out_M_imag_ce0,
        out_M_imag_we0 => grp_fft_top_2D_fu_446_out_M_imag_we0,
        out_M_imag_d0 => grp_fft_top_2D_fu_446_out_M_imag_d0);

    DEBLUR_fmul_32ns_lbW_U47 : component DEBLUR_fmul_32ns_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_457_p0,
        din1 => grp_fu_457_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_457_p2);

    DEBLUR_fmul_32ns_lbW_U48 : component DEBLUR_fmul_32ns_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_462_p0,
        din1 => grp_fu_462_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_462_p2);

    DEBLUR_fmul_32ns_lbW_U49 : component DEBLUR_fmul_32ns_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_data_re_reg_1256,
        din1 => ap_const_lv32_37000000,
        ce => ap_const_logic_1,
        dout => grp_fu_467_p2);

    DEBLUR_fmul_32ns_lbW_U50 : component DEBLUR_fmul_32ns_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_data_im_reg_1261,
        din1 => ap_const_lv32_37000000,
        ce => ap_const_logic_1,
        dout => grp_fu_472_p2);

    DEBLUR_fdiv_32ns_mb6_U51 : component DEBLUR_fdiv_32ns_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_reg_1113,
        din1 => ap_const_lv32_437F0000,
        ce => ap_const_logic_1,
        dout => grp_fu_479_p2);

    DEBLUR_sitofp_32nncg_U52 : component DEBLUR_sitofp_32nncg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_484_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_484_p1);

    DEBLUR_fptrunc_64ocq_U53 : component DEBLUR_fptrunc_64ocq
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_reg_1246,
        ce => ap_const_logic_1,
        dout => grp_fu_487_p1);

    DEBLUR_fptrunc_64ocq_U54 : component DEBLUR_fptrunc_64ocq
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_13_reg_1251,
        ce => ap_const_logic_1,
        dout => grp_fu_490_p1);

    DEBLUR_fpext_32nspcA_U55 : component DEBLUR_fpext_32nspcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fft_result_M_real_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_493_p1);

    DEBLUR_fpext_32nspcA_U56 : component DEBLUR_fpext_32nspcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fft_result_M_imag_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_497_p1);

    DEBLUR_fpext_32nspcA_U57 : component DEBLUR_fpext_32nspcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_542,
        ce => ap_const_logic_1,
        dout => grp_fu_501_p1);

    DEBLUR_fpext_32nspcA_U58 : component DEBLUR_fpext_32nspcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_548,
        ce => ap_const_logic_1,
        dout => grp_fu_504_p1);

    DEBLUR_fpext_32nspcA_U59 : component DEBLUR_fpext_32nspcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => coe_b_load_reg_1169_pp1_iter13_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_507_p1);

    DEBLUR_fcmp_32ns_qcK_U60 : component DEBLUR_fcmp_32ns_qcK
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => coe_b_q0,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_1,
        dout => grp_fu_510_p2);

    DEBLUR_dadd_64ns_bkb_U61 : component DEBLUR_dadd_64ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1210,
        din1 => tmp_4_reg_1215,
        ce => ap_const_logic_1,
        dout => grp_fu_516_p2);

    DEBLUR_dadd_64ns_bkb_U62 : component DEBLUR_dadd_64ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_reg_1220,
        din1 => tmp_11_reg_1225,
        ce => ap_const_logic_1,
        dout => grp_fu_520_p2);

    DEBLUR_dmul_64ns_rcU_U63 : component DEBLUR_dmul_64ns_rcU
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_reg_1190,
        din1 => ap_const_lv64_406FE00000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_524_p2);

    DEBLUR_dmul_64ns_rcU_U64 : component DEBLUR_dmul_64ns_rcU
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_reg_1200,
        din1 => ap_const_lv64_406FE00000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_529_p2);

    DEBLUR_ddiv_64ns_sc4_U65 : component DEBLUR_ddiv_64ns_sc4
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_5_reg_1230,
        din1 => tmp_6_reg_1235,
        ce => ap_const_logic_1,
        dout => grp_fu_534_p2);

    DEBLUR_ddiv_64ns_sc4_U66 : component DEBLUR_ddiv_64ns_sc4
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_12_reg_1241,
        din1 => tmp_6_reg_1235,
        ce => ap_const_logic_1,
        dout => grp_fu_538_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln13_3_fu_623_p2 = ap_const_lv1_1) and (icmp_ln13_2_fu_617_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                elsif (((icmp_ln13_3_fu_623_p2 = ap_const_lv1_1) and (icmp_ln13_2_fu_617_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state33) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((grp_fft_top_2D_fu_446_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state33)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state33);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter15 <= ap_enable_reg_pp1_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter16 <= ap_enable_reg_pp1_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter17 <= ap_enable_reg_pp1_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter18 <= ap_enable_reg_pp1_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter19 <= ap_enable_reg_pp1_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter20 <= ap_enable_reg_pp1_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter21 <= ap_enable_reg_pp1_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter22 <= ap_enable_reg_pp1_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter23 <= ap_enable_reg_pp1_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter24 <= ap_enable_reg_pp1_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter25 <= ap_enable_reg_pp1_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter26 <= ap_enable_reg_pp1_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter27 <= ap_enable_reg_pp1_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter28 <= ap_enable_reg_pp1_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter29 <= ap_enable_reg_pp1_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter30 <= ap_enable_reg_pp1_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter31 <= ap_enable_reg_pp1_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter32 <= ap_enable_reg_pp1_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter33 <= ap_enable_reg_pp1_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter34 <= ap_enable_reg_pp1_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter35 <= ap_enable_reg_pp1_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter36 <= ap_enable_reg_pp1_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter37 <= ap_enable_reg_pp1_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter38 <= ap_enable_reg_pp1_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter39 <= ap_enable_reg_pp1_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter40 <= ap_enable_reg_pp1_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter41 <= ap_enable_reg_pp1_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter42 <= ap_enable_reg_pp1_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter43 <= ap_enable_reg_pp1_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter44 <= ap_enable_reg_pp1_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter45 <= ap_enable_reg_pp1_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter46 <= ap_enable_reg_pp1_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter47 <= ap_enable_reg_pp1_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter48 <= ap_enable_reg_pp1_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter49 <= ap_enable_reg_pp1_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter50 <= ap_enable_reg_pp1_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter51 <= ap_enable_reg_pp1_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter52 <= ap_enable_reg_pp1_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter53 <= ap_enable_reg_pp1_iter52;
                elsif (((grp_fft_top_2D_fu_446_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    ap_enable_reg_pp1_iter53 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state89) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((grp_fft_top_2D_fu_446_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state89)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state89);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                elsif (((grp_fft_top_2D_fu_446_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                    ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_top_2D_fu_446_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft_top_2D_fu_446_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
                    grp_fft_top_2D_fu_446_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_top_2D_fu_446_ap_ready = ap_const_logic_1)) then 
                    grp_fft_top_2D_fu_446_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp1_iter3_phi_ln41_1_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                if (((ap_const_lv1_1 = and_ln32_fu_819_p2) and (icmp_ln26_reg_1123_pp1_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter3_phi_ln41_1_reg_401 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp1_iter3_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter2_phi_ln41_1_reg_401;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp1_iter3_phi_ln41_reg_389_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                if (((ap_const_lv1_1 = and_ln32_fu_819_p2) and (icmp_ln26_reg_1123_pp1_iter1_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter3_phi_ln41_reg_389 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp1_iter3_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter2_phi_ln41_reg_389;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp1_iter53_phi_ln41_1_reg_401_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter52 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                if (((ap_const_lv1_0 = and_ln32_reg_1176_pp1_iter51_reg) and (icmp_ln26_reg_1123_pp1_iter51_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter53_phi_ln41_1_reg_401 <= grp_fu_472_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp1_iter53_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter52_phi_ln41_1_reg_401;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp1_iter53_phi_ln41_reg_389_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter52 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                if (((ap_const_lv1_0 = and_ln32_reg_1176_pp1_iter51_reg) and (icmp_ln26_reg_1123_pp1_iter51_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp1_iter53_phi_ln41_reg_389 <= grp_fu_467_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp1_iter53_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter52_phi_ln41_reg_389;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten11_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln26_fu_707_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten11_reg_356 <= add_ln26_fu_713_p2;
            elsif (((grp_fft_top_2D_fu_446_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                indvar_flatten11_reg_356 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln68_fu_825_p2 = ap_const_lv1_0))) then 
                indvar_flatten23_reg_413 <= add_ln68_fu_831_p2;
            elsif (((grp_fft_top_2D_fu_446_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                indvar_flatten23_reg_413 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_3_fu_623_p2 = ap_const_lv1_1) and (icmp_ln13_2_fu_617_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                indvar_flatten_reg_323 <= ap_const_lv15_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_fu_629_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_323 <= add_ln54_fu_635_p2;
            end if; 
        end if;
    end process;

    phi_ln13_1_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_579_p2 = ap_const_lv1_0))) then 
                phi_ln13_1_reg_289 <= add_ln13_1_fu_559_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                phi_ln13_1_reg_289 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_ln13_2_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_1_fu_585_p2 = ap_const_lv1_1) and (icmp_ln13_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln13_2_reg_300 <= ap_const_lv7_0;
            elsif (((icmp_ln13_2_fu_617_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln13_3_fu_623_p2 = ap_const_lv1_0))) then 
                phi_ln13_2_reg_300 <= add_ln13_2_reg_1056;
            end if; 
        end if;
    end process;

    phi_ln13_3_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln13_2_fu_617_p2 = ap_const_lv1_0))) then 
                phi_ln13_3_reg_312 <= add_ln13_3_fu_597_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                phi_ln13_3_reg_312 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_ln13_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_1_fu_585_p2 = ap_const_lv1_0))) then 
                phi_ln13_reg_277 <= add_ln13_reg_1040;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln13_reg_277 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    x_0_i13_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln68_fu_825_p2 = ap_const_lv1_0))) then 
                x_0_i13_reg_435 <= x_2_fu_892_p2;
            elsif (((grp_fft_top_2D_fu_446_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                x_0_i13_reg_435 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    x_0_i_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_3_fu_623_p2 = ap_const_lv1_1) and (icmp_ln13_2_fu_617_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                x_0_i_reg_345 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_fu_629_p2 = ap_const_lv1_0))) then 
                x_0_i_reg_345 <= x_1_fu_697_p2;
            end if; 
        end if;
    end process;

    x_0_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln26_fu_707_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                x_0_reg_378 <= x_fu_778_p2;
            elsif (((grp_fft_top_2D_fu_446_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                x_0_reg_378 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    y_0_i12_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln68_reg_1276 = ap_const_lv1_0))) then 
                y_0_i12_reg_424 <= select_ln75_1_reg_1285;
            elsif (((grp_fft_top_2D_fu_446_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                y_0_i12_reg_424 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    y_0_i_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_3_fu_623_p2 = ap_const_lv1_1) and (icmp_ln13_2_fu_617_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                y_0_i_reg_334 <= ap_const_lv8_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_reg_1074 = ap_const_lv1_0))) then 
                y_0_i_reg_334 <= select_ln59_2_reg_1083;
            end if; 
        end if;
    end process;

    y_0_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln26_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                y_0_reg_367 <= select_ln32_1_reg_1132;
            elsif (((grp_fft_top_2D_fu_446_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                y_0_reg_367 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln13_2_reg_1056 <= add_ln13_2_fu_591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln13_reg_1040 <= add_ln13_fu_553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_1123_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                and_ln32_reg_1176 <= and_ln32_fu_819_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                and_ln32_reg_1176_pp1_iter10_reg <= and_ln32_reg_1176_pp1_iter9_reg;
                and_ln32_reg_1176_pp1_iter11_reg <= and_ln32_reg_1176_pp1_iter10_reg;
                and_ln32_reg_1176_pp1_iter12_reg <= and_ln32_reg_1176_pp1_iter11_reg;
                and_ln32_reg_1176_pp1_iter13_reg <= and_ln32_reg_1176_pp1_iter12_reg;
                and_ln32_reg_1176_pp1_iter14_reg <= and_ln32_reg_1176_pp1_iter13_reg;
                and_ln32_reg_1176_pp1_iter15_reg <= and_ln32_reg_1176_pp1_iter14_reg;
                and_ln32_reg_1176_pp1_iter16_reg <= and_ln32_reg_1176_pp1_iter15_reg;
                and_ln32_reg_1176_pp1_iter17_reg <= and_ln32_reg_1176_pp1_iter16_reg;
                and_ln32_reg_1176_pp1_iter18_reg <= and_ln32_reg_1176_pp1_iter17_reg;
                and_ln32_reg_1176_pp1_iter19_reg <= and_ln32_reg_1176_pp1_iter18_reg;
                and_ln32_reg_1176_pp1_iter20_reg <= and_ln32_reg_1176_pp1_iter19_reg;
                and_ln32_reg_1176_pp1_iter21_reg <= and_ln32_reg_1176_pp1_iter20_reg;
                and_ln32_reg_1176_pp1_iter22_reg <= and_ln32_reg_1176_pp1_iter21_reg;
                and_ln32_reg_1176_pp1_iter23_reg <= and_ln32_reg_1176_pp1_iter22_reg;
                and_ln32_reg_1176_pp1_iter24_reg <= and_ln32_reg_1176_pp1_iter23_reg;
                and_ln32_reg_1176_pp1_iter25_reg <= and_ln32_reg_1176_pp1_iter24_reg;
                and_ln32_reg_1176_pp1_iter26_reg <= and_ln32_reg_1176_pp1_iter25_reg;
                and_ln32_reg_1176_pp1_iter27_reg <= and_ln32_reg_1176_pp1_iter26_reg;
                and_ln32_reg_1176_pp1_iter28_reg <= and_ln32_reg_1176_pp1_iter27_reg;
                and_ln32_reg_1176_pp1_iter29_reg <= and_ln32_reg_1176_pp1_iter28_reg;
                and_ln32_reg_1176_pp1_iter30_reg <= and_ln32_reg_1176_pp1_iter29_reg;
                and_ln32_reg_1176_pp1_iter31_reg <= and_ln32_reg_1176_pp1_iter30_reg;
                and_ln32_reg_1176_pp1_iter32_reg <= and_ln32_reg_1176_pp1_iter31_reg;
                and_ln32_reg_1176_pp1_iter33_reg <= and_ln32_reg_1176_pp1_iter32_reg;
                and_ln32_reg_1176_pp1_iter34_reg <= and_ln32_reg_1176_pp1_iter33_reg;
                and_ln32_reg_1176_pp1_iter35_reg <= and_ln32_reg_1176_pp1_iter34_reg;
                and_ln32_reg_1176_pp1_iter36_reg <= and_ln32_reg_1176_pp1_iter35_reg;
                and_ln32_reg_1176_pp1_iter37_reg <= and_ln32_reg_1176_pp1_iter36_reg;
                and_ln32_reg_1176_pp1_iter38_reg <= and_ln32_reg_1176_pp1_iter37_reg;
                and_ln32_reg_1176_pp1_iter39_reg <= and_ln32_reg_1176_pp1_iter38_reg;
                and_ln32_reg_1176_pp1_iter3_reg <= and_ln32_reg_1176;
                and_ln32_reg_1176_pp1_iter40_reg <= and_ln32_reg_1176_pp1_iter39_reg;
                and_ln32_reg_1176_pp1_iter41_reg <= and_ln32_reg_1176_pp1_iter40_reg;
                and_ln32_reg_1176_pp1_iter42_reg <= and_ln32_reg_1176_pp1_iter41_reg;
                and_ln32_reg_1176_pp1_iter43_reg <= and_ln32_reg_1176_pp1_iter42_reg;
                and_ln32_reg_1176_pp1_iter44_reg <= and_ln32_reg_1176_pp1_iter43_reg;
                and_ln32_reg_1176_pp1_iter45_reg <= and_ln32_reg_1176_pp1_iter44_reg;
                and_ln32_reg_1176_pp1_iter46_reg <= and_ln32_reg_1176_pp1_iter45_reg;
                and_ln32_reg_1176_pp1_iter47_reg <= and_ln32_reg_1176_pp1_iter46_reg;
                and_ln32_reg_1176_pp1_iter48_reg <= and_ln32_reg_1176_pp1_iter47_reg;
                and_ln32_reg_1176_pp1_iter49_reg <= and_ln32_reg_1176_pp1_iter48_reg;
                and_ln32_reg_1176_pp1_iter4_reg <= and_ln32_reg_1176_pp1_iter3_reg;
                and_ln32_reg_1176_pp1_iter50_reg <= and_ln32_reg_1176_pp1_iter49_reg;
                and_ln32_reg_1176_pp1_iter51_reg <= and_ln32_reg_1176_pp1_iter50_reg;
                and_ln32_reg_1176_pp1_iter5_reg <= and_ln32_reg_1176_pp1_iter4_reg;
                and_ln32_reg_1176_pp1_iter6_reg <= and_ln32_reg_1176_pp1_iter5_reg;
                and_ln32_reg_1176_pp1_iter7_reg <= and_ln32_reg_1176_pp1_iter6_reg;
                and_ln32_reg_1176_pp1_iter8_reg <= and_ln32_reg_1176_pp1_iter7_reg;
                and_ln32_reg_1176_pp1_iter9_reg <= and_ln32_reg_1176_pp1_iter8_reg;
                coe_a_M_imag_addr_reg_1142_pp1_iter2_reg <= coe_a_M_imag_addr_reg_1142_pp1_iter1_reg;
                coe_a_M_real_addr_reg_1137_pp1_iter2_reg <= coe_a_M_real_addr_reg_1137_pp1_iter1_reg;
                coe_b_load_reg_1169_pp1_iter10_reg <= coe_b_load_reg_1169_pp1_iter9_reg;
                coe_b_load_reg_1169_pp1_iter11_reg <= coe_b_load_reg_1169_pp1_iter10_reg;
                coe_b_load_reg_1169_pp1_iter12_reg <= coe_b_load_reg_1169_pp1_iter11_reg;
                coe_b_load_reg_1169_pp1_iter13_reg <= coe_b_load_reg_1169_pp1_iter12_reg;
                coe_b_load_reg_1169_pp1_iter2_reg <= coe_b_load_reg_1169;
                coe_b_load_reg_1169_pp1_iter3_reg <= coe_b_load_reg_1169_pp1_iter2_reg;
                coe_b_load_reg_1169_pp1_iter4_reg <= coe_b_load_reg_1169_pp1_iter3_reg;
                coe_b_load_reg_1169_pp1_iter5_reg <= coe_b_load_reg_1169_pp1_iter4_reg;
                coe_b_load_reg_1169_pp1_iter6_reg <= coe_b_load_reg_1169_pp1_iter5_reg;
                coe_b_load_reg_1169_pp1_iter7_reg <= coe_b_load_reg_1169_pp1_iter6_reg;
                coe_b_load_reg_1169_pp1_iter8_reg <= coe_b_load_reg_1169_pp1_iter7_reg;
                coe_b_load_reg_1169_pp1_iter9_reg <= coe_b_load_reg_1169_pp1_iter8_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter10_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter9_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter11_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter10_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter12_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter11_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter13_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter12_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter14_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter13_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter15_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter14_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter16_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter15_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter17_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter16_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter18_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter17_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter19_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter18_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter20_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter19_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter21_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter20_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter22_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter21_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter23_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter22_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter24_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter23_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter25_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter24_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter26_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter25_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter27_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter26_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter28_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter27_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter29_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter28_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter2_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter1_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter30_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter29_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter31_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter30_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter32_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter31_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter33_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter32_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter34_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter33_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter35_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter34_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter36_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter35_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter37_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter36_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter38_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter37_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter39_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter38_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter3_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter2_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter40_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter39_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter41_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter40_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter42_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter41_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter43_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter42_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter44_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter43_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter45_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter44_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter46_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter45_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter47_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter46_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter48_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter47_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter49_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter48_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter4_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter3_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter50_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter49_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter51_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter50_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter52_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter51_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter5_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter4_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter6_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter5_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter7_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter6_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter8_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter7_reg;
                fft_result_M_imag_a_1_reg_1158_pp1_iter9_reg <= fft_result_M_imag_a_1_reg_1158_pp1_iter8_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter10_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter9_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter11_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter10_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter12_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter11_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter13_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter12_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter14_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter13_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter15_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter14_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter16_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter15_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter17_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter16_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter18_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter17_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter19_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter18_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter20_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter19_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter21_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter20_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter22_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter21_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter23_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter22_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter24_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter23_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter25_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter24_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter26_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter25_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter27_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter26_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter28_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter27_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter29_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter28_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter2_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter1_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter30_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter29_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter31_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter30_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter32_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter31_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter33_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter32_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter34_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter33_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter35_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter34_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter36_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter35_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter37_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter36_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter38_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter37_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter39_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter38_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter3_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter2_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter40_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter39_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter41_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter40_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter42_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter41_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter43_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter42_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter44_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter43_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter45_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter44_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter46_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter45_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter47_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter46_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter48_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter47_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter49_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter48_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter4_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter3_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter50_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter49_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter51_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter50_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter52_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter51_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter5_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter4_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter6_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter5_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter7_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter6_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter8_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter7_reg;
                fft_result_M_real_a_1_reg_1152_pp1_iter9_reg <= fft_result_M_real_a_1_reg_1152_pp1_iter8_reg;
                icmp_ln26_reg_1123_pp1_iter10_reg <= icmp_ln26_reg_1123_pp1_iter9_reg;
                icmp_ln26_reg_1123_pp1_iter11_reg <= icmp_ln26_reg_1123_pp1_iter10_reg;
                icmp_ln26_reg_1123_pp1_iter12_reg <= icmp_ln26_reg_1123_pp1_iter11_reg;
                icmp_ln26_reg_1123_pp1_iter13_reg <= icmp_ln26_reg_1123_pp1_iter12_reg;
                icmp_ln26_reg_1123_pp1_iter14_reg <= icmp_ln26_reg_1123_pp1_iter13_reg;
                icmp_ln26_reg_1123_pp1_iter15_reg <= icmp_ln26_reg_1123_pp1_iter14_reg;
                icmp_ln26_reg_1123_pp1_iter16_reg <= icmp_ln26_reg_1123_pp1_iter15_reg;
                icmp_ln26_reg_1123_pp1_iter17_reg <= icmp_ln26_reg_1123_pp1_iter16_reg;
                icmp_ln26_reg_1123_pp1_iter18_reg <= icmp_ln26_reg_1123_pp1_iter17_reg;
                icmp_ln26_reg_1123_pp1_iter19_reg <= icmp_ln26_reg_1123_pp1_iter18_reg;
                icmp_ln26_reg_1123_pp1_iter20_reg <= icmp_ln26_reg_1123_pp1_iter19_reg;
                icmp_ln26_reg_1123_pp1_iter21_reg <= icmp_ln26_reg_1123_pp1_iter20_reg;
                icmp_ln26_reg_1123_pp1_iter22_reg <= icmp_ln26_reg_1123_pp1_iter21_reg;
                icmp_ln26_reg_1123_pp1_iter23_reg <= icmp_ln26_reg_1123_pp1_iter22_reg;
                icmp_ln26_reg_1123_pp1_iter24_reg <= icmp_ln26_reg_1123_pp1_iter23_reg;
                icmp_ln26_reg_1123_pp1_iter25_reg <= icmp_ln26_reg_1123_pp1_iter24_reg;
                icmp_ln26_reg_1123_pp1_iter26_reg <= icmp_ln26_reg_1123_pp1_iter25_reg;
                icmp_ln26_reg_1123_pp1_iter27_reg <= icmp_ln26_reg_1123_pp1_iter26_reg;
                icmp_ln26_reg_1123_pp1_iter28_reg <= icmp_ln26_reg_1123_pp1_iter27_reg;
                icmp_ln26_reg_1123_pp1_iter29_reg <= icmp_ln26_reg_1123_pp1_iter28_reg;
                icmp_ln26_reg_1123_pp1_iter2_reg <= icmp_ln26_reg_1123_pp1_iter1_reg;
                icmp_ln26_reg_1123_pp1_iter30_reg <= icmp_ln26_reg_1123_pp1_iter29_reg;
                icmp_ln26_reg_1123_pp1_iter31_reg <= icmp_ln26_reg_1123_pp1_iter30_reg;
                icmp_ln26_reg_1123_pp1_iter32_reg <= icmp_ln26_reg_1123_pp1_iter31_reg;
                icmp_ln26_reg_1123_pp1_iter33_reg <= icmp_ln26_reg_1123_pp1_iter32_reg;
                icmp_ln26_reg_1123_pp1_iter34_reg <= icmp_ln26_reg_1123_pp1_iter33_reg;
                icmp_ln26_reg_1123_pp1_iter35_reg <= icmp_ln26_reg_1123_pp1_iter34_reg;
                icmp_ln26_reg_1123_pp1_iter36_reg <= icmp_ln26_reg_1123_pp1_iter35_reg;
                icmp_ln26_reg_1123_pp1_iter37_reg <= icmp_ln26_reg_1123_pp1_iter36_reg;
                icmp_ln26_reg_1123_pp1_iter38_reg <= icmp_ln26_reg_1123_pp1_iter37_reg;
                icmp_ln26_reg_1123_pp1_iter39_reg <= icmp_ln26_reg_1123_pp1_iter38_reg;
                icmp_ln26_reg_1123_pp1_iter3_reg <= icmp_ln26_reg_1123_pp1_iter2_reg;
                icmp_ln26_reg_1123_pp1_iter40_reg <= icmp_ln26_reg_1123_pp1_iter39_reg;
                icmp_ln26_reg_1123_pp1_iter41_reg <= icmp_ln26_reg_1123_pp1_iter40_reg;
                icmp_ln26_reg_1123_pp1_iter42_reg <= icmp_ln26_reg_1123_pp1_iter41_reg;
                icmp_ln26_reg_1123_pp1_iter43_reg <= icmp_ln26_reg_1123_pp1_iter42_reg;
                icmp_ln26_reg_1123_pp1_iter44_reg <= icmp_ln26_reg_1123_pp1_iter43_reg;
                icmp_ln26_reg_1123_pp1_iter45_reg <= icmp_ln26_reg_1123_pp1_iter44_reg;
                icmp_ln26_reg_1123_pp1_iter46_reg <= icmp_ln26_reg_1123_pp1_iter45_reg;
                icmp_ln26_reg_1123_pp1_iter47_reg <= icmp_ln26_reg_1123_pp1_iter46_reg;
                icmp_ln26_reg_1123_pp1_iter48_reg <= icmp_ln26_reg_1123_pp1_iter47_reg;
                icmp_ln26_reg_1123_pp1_iter49_reg <= icmp_ln26_reg_1123_pp1_iter48_reg;
                icmp_ln26_reg_1123_pp1_iter4_reg <= icmp_ln26_reg_1123_pp1_iter3_reg;
                icmp_ln26_reg_1123_pp1_iter50_reg <= icmp_ln26_reg_1123_pp1_iter49_reg;
                icmp_ln26_reg_1123_pp1_iter51_reg <= icmp_ln26_reg_1123_pp1_iter50_reg;
                icmp_ln26_reg_1123_pp1_iter52_reg <= icmp_ln26_reg_1123_pp1_iter51_reg;
                icmp_ln26_reg_1123_pp1_iter5_reg <= icmp_ln26_reg_1123_pp1_iter4_reg;
                icmp_ln26_reg_1123_pp1_iter6_reg <= icmp_ln26_reg_1123_pp1_iter5_reg;
                icmp_ln26_reg_1123_pp1_iter7_reg <= icmp_ln26_reg_1123_pp1_iter6_reg;
                icmp_ln26_reg_1123_pp1_iter8_reg <= icmp_ln26_reg_1123_pp1_iter7_reg;
                icmp_ln26_reg_1123_pp1_iter9_reg <= icmp_ln26_reg_1123_pp1_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter10_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter9_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter10_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter9_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter11_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter10_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter11_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter10_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter12_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter11_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter12_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter11_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter13_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter12_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter13_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter12_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter14_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter13_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter14_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter13_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter15_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter14_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter15_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter14_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter16_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter15_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter16_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter15_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter17_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter16_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter17_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter16_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter18_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter17_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter18_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter17_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter19_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter18_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter19_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter18_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter1_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter0_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter1_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter0_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter20_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter19_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter20_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter19_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter21_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter20_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter21_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter20_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter22_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter21_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter22_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter21_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter23_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter22_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter23_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter22_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter23 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter24_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter23_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter24_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter23_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter25_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter24_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter25_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter24_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter26_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter25_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter26_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter25_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter27_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter26_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter27_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter26_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter27 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter28_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter27_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter28_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter27_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter28 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter29_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter28_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter29_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter28_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter2_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter1_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter2_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter1_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter29 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter30_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter29_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter30_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter29_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter30 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter31_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter30_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter31_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter30_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter31 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter32_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter31_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter32_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter31_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter32 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter33_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter32_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter33_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter32_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter33 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter34_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter33_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter34_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter33_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter34 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter35_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter34_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter35_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter34_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter35 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter36_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter35_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter36_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter35_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter36 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter37_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter36_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter37_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter36_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter37 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter38_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter37_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter38_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter37_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter38 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter39_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter38_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter39_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter38_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter39 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter40_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter39_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter40_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter39_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter40 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter41_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter40_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter41_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter40_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter41 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter42_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter41_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter42_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter41_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter42 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter43_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter42_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter43_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter42_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter43 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter44_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter43_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter44_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter43_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter44 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter45_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter44_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter45_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter44_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter45 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter46_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter45_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter46_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter45_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter46 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter47_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter46_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter47_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter46_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter47 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter48_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter47_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter48_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter47_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter48 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter49_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter48_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter49_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter48_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter4_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter3_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter4_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter3_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter49 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter50_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter49_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter50_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter49_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter50 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter51_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter50_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter51_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter50_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter51 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter52_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter51_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter52_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter51_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter5_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter4_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter5_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter4_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter6_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter5_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter6_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter5_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter7_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter6_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter7_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter6_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter8_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter7_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter8_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter7_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_phi_reg_pp1_iter9_phi_ln41_1_reg_401 <= ap_phi_reg_pp1_iter8_phi_ln41_1_reg_401;
                ap_phi_reg_pp1_iter9_phi_ln41_reg_389 <= ap_phi_reg_pp1_iter8_phi_ln41_reg_389;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln26_fu_707_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                coe_a_M_imag_addr_reg_1142 <= zext_ln1044_1_fu_769_p1(14 - 1 downto 0);
                coe_a_M_real_addr_reg_1137 <= zext_ln1044_1_fu_769_p1(14 - 1 downto 0);
                fft_result_M_imag_a_1_reg_1158 <= zext_ln1044_1_fu_769_p1(14 - 1 downto 0);
                fft_result_M_real_a_1_reg_1152 <= zext_ln1044_1_fu_769_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                coe_a_M_imag_addr_reg_1142_pp1_iter1_reg <= coe_a_M_imag_addr_reg_1142;
                coe_a_M_real_addr_reg_1137_pp1_iter1_reg <= coe_a_M_real_addr_reg_1137;
                fft_result_M_imag_a_1_reg_1158_pp1_iter1_reg <= fft_result_M_imag_a_1_reg_1158;
                fft_result_M_real_a_1_reg_1152_pp1_iter1_reg <= fft_result_M_real_a_1_reg_1152;
                icmp_ln26_reg_1123 <= icmp_ln26_fu_707_p2;
                icmp_ln26_reg_1123_pp1_iter1_reg <= icmp_ln26_reg_1123;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln32_reg_1176_pp1_iter3_reg) and (icmp_ln26_reg_1123_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                coe_a_M_imag_load_reg_1205 <= coe_a_M_imag_q0;
                coe_a_M_real_load_reg_1195 <= coe_a_M_real_q0;
                tmp_1_reg_1190 <= grp_fu_493_p1;
                tmp_8_reg_1200 <= grp_fu_497_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln26_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                coe_b_load_reg_1169 <= coe_b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln54_reg_1074 <= icmp_ln54_fu_629_p2;
                icmp_ln54_reg_1074_pp0_iter1_reg <= icmp_ln54_reg_1074;
                    zext_ln555_2_reg_1088_pp0_iter1_reg(15 downto 0) <= zext_ln555_2_reg_1088(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln54_reg_1074_pp0_iter10_reg <= icmp_ln54_reg_1074_pp0_iter9_reg;
                icmp_ln54_reg_1074_pp0_iter11_reg <= icmp_ln54_reg_1074_pp0_iter10_reg;
                icmp_ln54_reg_1074_pp0_iter12_reg <= icmp_ln54_reg_1074_pp0_iter11_reg;
                icmp_ln54_reg_1074_pp0_iter13_reg <= icmp_ln54_reg_1074_pp0_iter12_reg;
                icmp_ln54_reg_1074_pp0_iter14_reg <= icmp_ln54_reg_1074_pp0_iter13_reg;
                icmp_ln54_reg_1074_pp0_iter15_reg <= icmp_ln54_reg_1074_pp0_iter14_reg;
                icmp_ln54_reg_1074_pp0_iter16_reg <= icmp_ln54_reg_1074_pp0_iter15_reg;
                icmp_ln54_reg_1074_pp0_iter17_reg <= icmp_ln54_reg_1074_pp0_iter16_reg;
                icmp_ln54_reg_1074_pp0_iter18_reg <= icmp_ln54_reg_1074_pp0_iter17_reg;
                icmp_ln54_reg_1074_pp0_iter19_reg <= icmp_ln54_reg_1074_pp0_iter18_reg;
                icmp_ln54_reg_1074_pp0_iter20_reg <= icmp_ln54_reg_1074_pp0_iter19_reg;
                icmp_ln54_reg_1074_pp0_iter21_reg <= icmp_ln54_reg_1074_pp0_iter20_reg;
                icmp_ln54_reg_1074_pp0_iter22_reg <= icmp_ln54_reg_1074_pp0_iter21_reg;
                icmp_ln54_reg_1074_pp0_iter23_reg <= icmp_ln54_reg_1074_pp0_iter22_reg;
                icmp_ln54_reg_1074_pp0_iter2_reg <= icmp_ln54_reg_1074_pp0_iter1_reg;
                icmp_ln54_reg_1074_pp0_iter3_reg <= icmp_ln54_reg_1074_pp0_iter2_reg;
                icmp_ln54_reg_1074_pp0_iter4_reg <= icmp_ln54_reg_1074_pp0_iter3_reg;
                icmp_ln54_reg_1074_pp0_iter5_reg <= icmp_ln54_reg_1074_pp0_iter4_reg;
                icmp_ln54_reg_1074_pp0_iter6_reg <= icmp_ln54_reg_1074_pp0_iter5_reg;
                icmp_ln54_reg_1074_pp0_iter7_reg <= icmp_ln54_reg_1074_pp0_iter6_reg;
                icmp_ln54_reg_1074_pp0_iter8_reg <= icmp_ln54_reg_1074_pp0_iter7_reg;
                icmp_ln54_reg_1074_pp0_iter9_reg <= icmp_ln54_reg_1074_pp0_iter8_reg;
                    zext_ln555_2_reg_1088_pp0_iter10_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter9_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter11_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter10_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter12_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter11_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter13_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter12_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter14_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter13_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter15_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter14_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter16_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter15_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter17_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter16_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter18_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter17_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter19_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter18_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter20_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter19_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter21_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter20_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter22_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter21_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter23_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter22_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter2_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter1_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter3_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter2_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter4_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter3_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter5_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter4_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter6_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter5_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter7_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter6_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter8_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter7_reg(15 downto 0);
                    zext_ln555_2_reg_1088_pp0_iter9_reg(15 downto 0) <= zext_ln555_2_reg_1088_pp0_iter8_reg(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln68_reg_1276 <= icmp_ln68_fu_825_p2;
                icmp_ln68_reg_1276_pp2_iter1_reg <= icmp_ln68_reg_1276;
                    zext_ln321_5_reg_1290_pp2_iter1_reg(15 downto 0) <= zext_ln321_5_reg_1290(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln68_reg_1276_pp2_iter10_reg <= icmp_ln68_reg_1276_pp2_iter9_reg;
                icmp_ln68_reg_1276_pp2_iter2_reg <= icmp_ln68_reg_1276_pp2_iter1_reg;
                icmp_ln68_reg_1276_pp2_iter3_reg <= icmp_ln68_reg_1276_pp2_iter2_reg;
                icmp_ln68_reg_1276_pp2_iter4_reg <= icmp_ln68_reg_1276_pp2_iter3_reg;
                icmp_ln68_reg_1276_pp2_iter5_reg <= icmp_ln68_reg_1276_pp2_iter4_reg;
                icmp_ln68_reg_1276_pp2_iter6_reg <= icmp_ln68_reg_1276_pp2_iter5_reg;
                icmp_ln68_reg_1276_pp2_iter7_reg <= icmp_ln68_reg_1276_pp2_iter6_reg;
                icmp_ln68_reg_1276_pp2_iter8_reg <= icmp_ln68_reg_1276_pp2_iter7_reg;
                icmp_ln68_reg_1276_pp2_iter9_reg <= icmp_ln68_reg_1276_pp2_iter8_reg;
                    zext_ln321_5_reg_1290_pp2_iter10_reg(15 downto 0) <= zext_ln321_5_reg_1290_pp2_iter9_reg(15 downto 0);
                    zext_ln321_5_reg_1290_pp2_iter2_reg(15 downto 0) <= zext_ln321_5_reg_1290_pp2_iter1_reg(15 downto 0);
                    zext_ln321_5_reg_1290_pp2_iter3_reg(15 downto 0) <= zext_ln321_5_reg_1290_pp2_iter2_reg(15 downto 0);
                    zext_ln321_5_reg_1290_pp2_iter4_reg(15 downto 0) <= zext_ln321_5_reg_1290_pp2_iter3_reg(15 downto 0);
                    zext_ln321_5_reg_1290_pp2_iter5_reg(15 downto 0) <= zext_ln321_5_reg_1290_pp2_iter4_reg(15 downto 0);
                    zext_ln321_5_reg_1290_pp2_iter6_reg(15 downto 0) <= zext_ln321_5_reg_1290_pp2_iter5_reg(15 downto 0);
                    zext_ln321_5_reg_1290_pp2_iter7_reg(15 downto 0) <= zext_ln321_5_reg_1290_pp2_iter6_reg(15 downto 0);
                    zext_ln321_5_reg_1290_pp2_iter8_reg(15 downto 0) <= zext_ln321_5_reg_1290_pp2_iter7_reg(15 downto 0);
                    zext_ln321_5_reg_1290_pp2_iter9_reg(15 downto 0) <= zext_ln321_5_reg_1290_pp2_iter8_reg(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln32_reg_1176_pp1_iter47_reg) and (icmp_ln26_reg_1123_pp1_iter47_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                input_data_im_reg_1261 <= grp_fu_490_p1;
                input_data_re_reg_1256 <= grp_fu_487_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln68_reg_1276_pp2_iter9_reg = ap_const_lv1_0))) then
                p_Result_s_reg_1310 <= p_Val2_s_fu_898_p1(31 downto 31);
                select_ln1312_reg_1315 <= select_ln1312_fu_1020_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_reg_1074_pp0_iter22_reg = ap_const_lv1_0))) then
                p_r_assign_1_reg_1118 <= grp_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln32_reg_1176_pp1_iter7_reg) and (icmp_ln26_reg_1123_pp1_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln68_reg_1276_pp2_iter4_reg = ap_const_lv1_0)))) then
                reg_542 <= grp_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp1_iter8 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln32_reg_1176_pp1_iter7_reg) and (icmp_ln26_reg_1123_pp1_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln68_reg_1276_pp2_iter8_reg = ap_const_lv1_0)))) then
                reg_548 <= grp_fu_462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln26_fu_707_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln32_1_reg_1132 <= select_ln32_1_fu_739_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_fu_629_p2 = ap_const_lv1_0))) then
                select_ln59_2_reg_1083 <= select_ln59_2_fu_661_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln68_fu_825_p2 = ap_const_lv1_0))) then
                select_ln75_1_reg_1285 <= select_ln75_1_fu_857_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln32_reg_1176_pp1_iter9_reg) and (icmp_ln26_reg_1123_pp1_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_11_reg_1225 <= grp_fu_504_p1;
                tmp_2_reg_1210 <= grp_fu_524_p2;
                tmp_4_reg_1215 <= grp_fu_501_p1;
                tmp_9_reg_1220 <= grp_fu_529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln32_reg_1176_pp1_iter14_reg) and (icmp_ln26_reg_1123_pp1_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_12_reg_1241 <= grp_fu_520_p2;
                tmp_5_reg_1230 <= grp_fu_516_p2;
                tmp_6_reg_1235 <= grp_fu_507_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln32_reg_1176_pp1_iter45_reg) and (icmp_ln26_reg_1123_pp1_iter45_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_13_reg_1251 <= grp_fu_538_p2;
                tmp_7_reg_1246 <= grp_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln68_reg_1276 = ap_const_lv1_0))) then
                tmp_M_real_load_reg_1305 <= tmp_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln54_reg_1074_pp0_iter6_reg = ap_const_lv1_0))) then
                tmp_i_reg_1113 <= grp_fu_484_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_reg_1074 = ap_const_lv1_0))) then
                x_io_V_load_reg_1103 <= x_io_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln68_fu_825_p2 = ap_const_lv1_0))) then
                    zext_ln321_5_reg_1290(15 downto 0) <= zext_ln321_5_fu_887_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_fu_629_p2 = ap_const_lv1_0))) then
                    zext_ln555_2_reg_1088(15 downto 0) <= zext_ln555_2_fu_691_p1(15 downto 0);
            end if;
        end if;
    end process;
    zext_ln555_2_reg_1088(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter1_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter2_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter3_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter4_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter5_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter6_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter7_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter8_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter9_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter10_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter11_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter12_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter13_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter14_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter15_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter16_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter17_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter18_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter19_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter20_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter21_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter22_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln555_2_reg_1088_pp0_iter23_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln321_5_reg_1290(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln321_5_reg_1290_pp2_iter1_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln321_5_reg_1290_pp2_iter2_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln321_5_reg_1290_pp2_iter3_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln321_5_reg_1290_pp2_iter4_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln321_5_reg_1290_pp2_iter5_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln321_5_reg_1290_pp2_iter6_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln321_5_reg_1290_pp2_iter7_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln321_5_reg_1290_pp2_iter8_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln321_5_reg_1290_pp2_iter9_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln321_5_reg_1290_pp2_iter10_reg(63 downto 16) <= "000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln13_2_fu_617_p2, icmp_ln13_3_fu_623_p2, icmp_ln54_fu_629_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln26_fu_707_p2, ap_enable_reg_pp1_iter0, icmp_ln68_fu_825_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_CS_fsm_state32, grp_fft_top_2D_fu_446_ap_done, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter52, ap_enable_reg_pp1_iter53, ap_CS_fsm_state88, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11, icmp_ln13_fu_579_p2, icmp_ln13_1_fu_585_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln13_1_fu_585_p2 = ap_const_lv1_1) and (icmp_ln13_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((icmp_ln13_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_1_fu_585_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln13_3_fu_623_p2 = ap_const_lv1_1) and (icmp_ln13_2_fu_617_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln13_2_fu_617_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln13_3_fu_623_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln54_fu_629_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln54_fu_629_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((grp_fft_top_2D_fu_446_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln26_fu_707_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter53 = ap_const_logic_1) and (ap_enable_reg_pp1_iter52 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter53 = ap_const_logic_1) and (ap_enable_reg_pp1_iter52 = ap_const_logic_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln26_fu_707_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                if (((grp_fft_top_2D_fu_446_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln68_fu_825_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter11 = ap_const_logic_1) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln68_fu_825_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter11 = ap_const_logic_1) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1044_fu_763_p2 <= std_logic_vector(unsigned(zext_ln29_fu_755_p1) + unsigned(zext_ln1044_fu_759_p1));
    add_ln13_1_fu_559_p2 <= std_logic_vector(unsigned(phi_ln13_1_reg_289) + unsigned(ap_const_lv7_1));
    add_ln13_2_fu_591_p2 <= std_logic_vector(unsigned(phi_ln13_2_reg_300) + unsigned(ap_const_lv7_1));
    add_ln13_3_fu_597_p2 <= std_logic_vector(unsigned(phi_ln13_3_reg_312) + unsigned(ap_const_lv7_1));
    add_ln13_fu_553_p2 <= std_logic_vector(unsigned(phi_ln13_reg_277) + unsigned(ap_const_lv7_1));
    add_ln26_fu_713_p2 <= std_logic_vector(unsigned(indvar_flatten11_reg_356) + unsigned(ap_const_lv15_1));
    add_ln321_fu_881_p2 <= std_logic_vector(unsigned(zext_ln71_fu_873_p1) + unsigned(zext_ln321_fu_877_p1));
    add_ln339_fu_942_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(zext_ln339_fu_938_p1));
    add_ln54_fu_635_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_323) + unsigned(ap_const_lv15_1));
    add_ln555_fu_685_p2 <= std_logic_vector(unsigned(zext_ln555_1_fu_681_p1) + unsigned(zext_ln57_fu_677_p1));
    add_ln68_fu_831_p2 <= std_logic_vector(unsigned(indvar_flatten23_reg_413) + unsigned(ap_const_lv15_1));
    and_ln32_fu_819_p2 <= (or_ln32_fu_813_p2 and grp_fu_510_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state101 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(6);
    ap_CS_fsm_state32 <= ap_CS_fsm(7);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state87 <= ap_CS_fsm(9);
    ap_CS_fsm_state88 <= ap_CS_fsm(10);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state100_pp2_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp1_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp1_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp1_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp1_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp1_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp1_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp1_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp1_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp1_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp1_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp1_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp1_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp1_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp1_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp1_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp1_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp1_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp1_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp1_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp1_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp1_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp1_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp1_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp1_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp1_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp1_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp1_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp1_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp1_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp1_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp1_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp1_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp1_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp1_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp1_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp1_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp1_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp1_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp1_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp1_stage0_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state85_pp1_stage0_iter52 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp1_stage0_iter53 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state89_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state90_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state91_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state95_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state96_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state97_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state98_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state99_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln54_fu_629_p2)
    begin
        if ((icmp_ln54_fu_629_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state33_assign_proc : process(icmp_ln26_fu_707_p2)
    begin
        if ((icmp_ln26_fu_707_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state33 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state89_assign_proc : process(icmp_ln68_fu_825_p2)
    begin
        if ((icmp_ln68_fu_825_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state89 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state89 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter11, ap_enable_reg_pp1_iter12, ap_enable_reg_pp1_iter13, ap_enable_reg_pp1_iter14, ap_enable_reg_pp1_iter15, ap_enable_reg_pp1_iter16, ap_enable_reg_pp1_iter17, ap_enable_reg_pp1_iter18, ap_enable_reg_pp1_iter19, ap_enable_reg_pp1_iter20, ap_enable_reg_pp1_iter21, ap_enable_reg_pp1_iter22, ap_enable_reg_pp1_iter23, ap_enable_reg_pp1_iter24, ap_enable_reg_pp1_iter25, ap_enable_reg_pp1_iter26, ap_enable_reg_pp1_iter27, ap_enable_reg_pp1_iter28, ap_enable_reg_pp1_iter29, ap_enable_reg_pp1_iter30, ap_enable_reg_pp1_iter31, ap_enable_reg_pp1_iter32, ap_enable_reg_pp1_iter33, ap_enable_reg_pp1_iter34, ap_enable_reg_pp1_iter35, ap_enable_reg_pp1_iter36, ap_enable_reg_pp1_iter37, ap_enable_reg_pp1_iter38, ap_enable_reg_pp1_iter39, ap_enable_reg_pp1_iter40, ap_enable_reg_pp1_iter41, ap_enable_reg_pp1_iter42, ap_enable_reg_pp1_iter43, ap_enable_reg_pp1_iter44, ap_enable_reg_pp1_iter45, ap_enable_reg_pp1_iter46, ap_enable_reg_pp1_iter47, ap_enable_reg_pp1_iter48, ap_enable_reg_pp1_iter49, ap_enable_reg_pp1_iter50, ap_enable_reg_pp1_iter51, ap_enable_reg_pp1_iter52, ap_enable_reg_pp1_iter53)
    begin
        if (((ap_enable_reg_pp1_iter38 = ap_const_logic_0) and (ap_enable_reg_pp1_iter37 = ap_const_logic_0) and (ap_enable_reg_pp1_iter36 = ap_const_logic_0) and (ap_enable_reg_pp1_iter35 = ap_const_logic_0) and (ap_enable_reg_pp1_iter34 = ap_const_logic_0) and (ap_enable_reg_pp1_iter33 = ap_const_logic_0) and (ap_enable_reg_pp1_iter32 = ap_const_logic_0) and (ap_enable_reg_pp1_iter31 = ap_const_logic_0) and (ap_enable_reg_pp1_iter30 = ap_const_logic_0) and (ap_enable_reg_pp1_iter29 = ap_const_logic_0) and (ap_enable_reg_pp1_iter28 = ap_const_logic_0) and (ap_enable_reg_pp1_iter27 = ap_const_logic_0) and (ap_enable_reg_pp1_iter26 = ap_const_logic_0) and (ap_enable_reg_pp1_iter25 = ap_const_logic_0) and (ap_enable_reg_pp1_iter24 = ap_const_logic_0) and (ap_enable_reg_pp1_iter23 = ap_const_logic_0) and (ap_enable_reg_pp1_iter22 = ap_const_logic_0) and (ap_enable_reg_pp1_iter21 = ap_const_logic_0) and (ap_enable_reg_pp1_iter20 = ap_const_logic_0) and (ap_enable_reg_pp1_iter19 = ap_const_logic_0) and (ap_enable_reg_pp1_iter18 = ap_const_logic_0) and (ap_enable_reg_pp1_iter17 = ap_const_logic_0) and (ap_enable_reg_pp1_iter16 = ap_const_logic_0) and (ap_enable_reg_pp1_iter15 = ap_const_logic_0) and (ap_enable_reg_pp1_iter14 = ap_const_logic_0) and (ap_enable_reg_pp1_iter13 = ap_const_logic_0) and (ap_enable_reg_pp1_iter12 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter53 = ap_const_logic_0) and (ap_enable_reg_pp1_iter52 = ap_const_logic_0) and (ap_enable_reg_pp1_iter51 = ap_const_logic_0) and (ap_enable_reg_pp1_iter50 = ap_const_logic_0) and (ap_enable_reg_pp1_iter49 = ap_const_logic_0) and (ap_enable_reg_pp1_iter48 = ap_const_logic_0) and (ap_enable_reg_pp1_iter47 = ap_const_logic_0) and (ap_enable_reg_pp1_iter46 = ap_const_logic_0) and (ap_enable_reg_pp1_iter45 = ap_const_logic_0) and (ap_enable_reg_pp1_iter44 = ap_const_logic_0) and (ap_enable_reg_pp1_iter43 = ap_const_logic_0) and (ap_enable_reg_pp1_iter42 = ap_const_logic_0) and (ap_enable_reg_pp1_iter41 = ap_const_logic_0) and (ap_enable_reg_pp1_iter40 = ap_const_logic_0) and (ap_enable_reg_pp1_iter39 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_y_0_i12_phi_fu_428_p4_assign_proc : process(y_0_i12_reg_424, icmp_ln68_reg_1276, ap_CS_fsm_pp2_stage0, select_ln75_1_reg_1285, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln68_reg_1276 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_y_0_i12_phi_fu_428_p4 <= select_ln75_1_reg_1285;
        else 
            ap_phi_mux_y_0_i12_phi_fu_428_p4 <= y_0_i12_reg_424;
        end if; 
    end process;


    ap_phi_mux_y_0_i_phi_fu_338_p4_assign_proc : process(y_0_i_reg_334, icmp_ln54_reg_1074, ap_CS_fsm_pp0_stage0, select_ln59_2_reg_1083, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_reg_1074 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_y_0_i_phi_fu_338_p4 <= select_ln59_2_reg_1083;
        else 
            ap_phi_mux_y_0_i_phi_fu_338_p4 <= y_0_i_reg_334;
        end if; 
    end process;


    ap_phi_mux_y_0_phi_fu_371_p4_assign_proc : process(y_0_reg_367, icmp_ln26_reg_1123, ap_CS_fsm_pp1_stage0, select_ln32_1_reg_1132, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln26_reg_1123 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_y_0_phi_fu_371_p4 <= select_ln32_1_reg_1132;
        else 
            ap_phi_mux_y_0_phi_fu_371_p4 <= y_0_reg_367;
        end if; 
    end process;

    ap_phi_reg_pp1_iter0_phi_ln41_1_reg_401 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp1_iter0_phi_ln41_reg_389 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln32_fu_784_p1 <= coe_b_load_reg_1169;
    coe_a_M_imag_address0 <= coe_a_M_imag_addr_reg_1142_pp1_iter2_reg;

    coe_a_M_imag_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            coe_a_M_imag_ce0 <= ap_const_logic_1;
        else 
            coe_a_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coe_a_M_real_address0 <= coe_a_M_real_addr_reg_1137_pp1_iter2_reg;

    coe_a_M_real_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            coe_a_M_real_ce0 <= ap_const_logic_1;
        else 
            coe_a_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coe_b_address0 <= zext_ln1044_1_fu_769_p1(14 - 1 downto 0);

    coe_b_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            coe_b_ce0 <= ap_const_logic_1;
        else 
            coe_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fft_result_M_imag_address0_assign_proc : process(ap_CS_fsm_state5, fft_result_M_imag_a_1_reg_1158_pp1_iter1_reg, ap_CS_fsm_state32, ap_enable_reg_pp1_iter2, ap_CS_fsm_state88, grp_fft_top_2D_fu_446_in_M_imag_address0, grp_fft_top_2D_fu_446_out_M_imag_address0, ap_block_pp1_stage0, zext_ln1027_1_fu_611_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            fft_result_M_imag_address0 <= fft_result_M_imag_a_1_reg_1158_pp1_iter1_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fft_result_M_imag_address0 <= zext_ln1027_1_fu_611_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            fft_result_M_imag_address0 <= grp_fft_top_2D_fu_446_out_M_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            fft_result_M_imag_address0 <= grp_fft_top_2D_fu_446_in_M_imag_address0;
        else 
            fft_result_M_imag_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    fft_result_M_imag_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state5, ap_CS_fsm_state32, ap_enable_reg_pp1_iter2, ap_CS_fsm_state88, grp_fft_top_2D_fu_446_in_M_imag_ce0, grp_fft_top_2D_fu_446_out_M_imag_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            fft_result_M_imag_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            fft_result_M_imag_ce0 <= grp_fft_top_2D_fu_446_out_M_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            fft_result_M_imag_ce0 <= grp_fft_top_2D_fu_446_in_M_imag_ce0;
        else 
            fft_result_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fft_result_M_imag_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter53)
    begin
        if (((ap_enable_reg_pp1_iter53 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fft_result_M_imag_ce1 <= ap_const_logic_1;
        else 
            fft_result_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fft_result_M_imag_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state32, grp_fft_top_2D_fu_446_out_M_imag_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fft_result_M_imag_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            fft_result_M_imag_d0 <= grp_fft_top_2D_fu_446_out_M_imag_d0;
        else 
            fft_result_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fft_result_M_imag_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state32, grp_fft_top_2D_fu_446_out_M_imag_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fft_result_M_imag_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            fft_result_M_imag_we0 <= grp_fft_top_2D_fu_446_out_M_imag_we0;
        else 
            fft_result_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fft_result_M_imag_we1_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln26_reg_1123_pp1_iter52_reg, ap_enable_reg_pp1_iter53)
    begin
        if (((ap_enable_reg_pp1_iter53 = ap_const_logic_1) and (icmp_ln26_reg_1123_pp1_iter52_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fft_result_M_imag_we1 <= ap_const_logic_1;
        else 
            fft_result_M_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;


    fft_result_M_real_address0_assign_proc : process(ap_CS_fsm_state5, fft_result_M_real_a_1_reg_1152_pp1_iter1_reg, ap_CS_fsm_state32, ap_enable_reg_pp1_iter2, ap_CS_fsm_state88, grp_fft_top_2D_fu_446_in_M_real_address0, grp_fft_top_2D_fu_446_out_M_real_address0, ap_block_pp1_stage0, zext_ln1027_1_fu_611_p1)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            fft_result_M_real_address0 <= fft_result_M_real_a_1_reg_1152_pp1_iter1_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fft_result_M_real_address0 <= zext_ln1027_1_fu_611_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            fft_result_M_real_address0 <= grp_fft_top_2D_fu_446_out_M_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            fft_result_M_real_address0 <= grp_fft_top_2D_fu_446_in_M_real_address0;
        else 
            fft_result_M_real_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    fft_result_M_real_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state5, ap_CS_fsm_state32, ap_enable_reg_pp1_iter2, ap_CS_fsm_state88, grp_fft_top_2D_fu_446_in_M_real_ce0, grp_fft_top_2D_fu_446_out_M_real_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            fft_result_M_real_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            fft_result_M_real_ce0 <= grp_fft_top_2D_fu_446_out_M_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            fft_result_M_real_ce0 <= grp_fft_top_2D_fu_446_in_M_real_ce0;
        else 
            fft_result_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fft_result_M_real_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter53)
    begin
        if (((ap_enable_reg_pp1_iter53 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fft_result_M_real_ce1 <= ap_const_logic_1;
        else 
            fft_result_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fft_result_M_real_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state32, grp_fft_top_2D_fu_446_out_M_real_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fft_result_M_real_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            fft_result_M_real_d0 <= grp_fft_top_2D_fu_446_out_M_real_d0;
        else 
            fft_result_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fft_result_M_real_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state32, grp_fft_top_2D_fu_446_out_M_real_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fft_result_M_real_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            fft_result_M_real_we0 <= grp_fft_top_2D_fu_446_out_M_real_we0;
        else 
            fft_result_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fft_result_M_real_we1_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln26_reg_1123_pp1_iter52_reg, ap_enable_reg_pp1_iter53)
    begin
        if (((ap_enable_reg_pp1_iter53 = ap_const_logic_1) and (icmp_ln26_reg_1123_pp1_iter52_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            fft_result_M_real_we1 <= ap_const_logic_1;
        else 
            fft_result_M_real_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fft_top_2D_fu_446_ap_start <= grp_fft_top_2D_fu_446_ap_start_reg;

    grp_fft_top_2D_fu_446_direction_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_fft_top_2D_fu_446_direction <= ap_const_logic_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fft_top_2D_fu_446_direction <= ap_const_logic_1;
        else 
            grp_fft_top_2D_fu_446_direction <= 'X';
        end if; 
    end process;


    grp_fft_top_2D_fu_446_in_M_imag_q0_assign_proc : process(fft_result_M_imag_q0, ap_CS_fsm_state32, ap_CS_fsm_state88, tmp_M_imag_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_fft_top_2D_fu_446_in_M_imag_q0 <= fft_result_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fft_top_2D_fu_446_in_M_imag_q0 <= tmp_M_imag_q0;
        else 
            grp_fft_top_2D_fu_446_in_M_imag_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fft_top_2D_fu_446_in_M_real_q0_assign_proc : process(fft_result_M_real_q0, tmp_M_real_q0, ap_CS_fsm_state32, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_fft_top_2D_fu_446_in_M_real_q0 <= fft_result_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            grp_fft_top_2D_fu_446_in_M_real_q0 <= tmp_M_real_q0;
        else 
            grp_fft_top_2D_fu_446_in_M_real_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_457_p0_assign_proc : process(coe_a_M_real_load_reg_1195, tmp_M_real_load_reg_1305, ap_enable_reg_pp1_iter5, ap_enable_reg_pp2_iter2, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_457_p0 <= tmp_M_real_load_reg_1305;
        elsif (((ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_457_p0 <= coe_a_M_real_load_reg_1195;
        else 
            grp_fu_457_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_457_p1_assign_proc : process(ap_enable_reg_pp1_iter5, ap_enable_reg_pp2_iter2, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_457_p1 <= ap_const_lv32_48000000;
        elsif (((ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_457_p1 <= ap_const_lv32_3D23D70A;
        else 
            grp_fu_457_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_462_p0_assign_proc : process(reg_542, coe_a_M_imag_load_reg_1205, ap_enable_reg_pp1_iter5, ap_enable_reg_pp2_iter6, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_462_p0 <= reg_542;
        elsif (((ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_462_p0 <= coe_a_M_imag_load_reg_1205;
        else 
            grp_fu_462_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_462_p1_assign_proc : process(ap_enable_reg_pp1_iter5, ap_enable_reg_pp2_iter6, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_462_p1 <= ap_const_lv32_3C000000;
        elsif (((ap_enable_reg_pp1_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_462_p1 <= ap_const_lv32_3D23D70A;
        else 
            grp_fu_462_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_484_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_io_V_load_reg_1103),32));
    icmp_ln13_1_fu_585_p2 <= "1" when (phi_ln13_reg_277 = ap_const_lv7_7F) else "0";
    icmp_ln13_2_fu_617_p2 <= "1" when (phi_ln13_3_reg_312 = ap_const_lv7_7F) else "0";
    icmp_ln13_3_fu_623_p2 <= "1" when (phi_ln13_2_reg_300 = ap_const_lv7_7F) else "0";
    icmp_ln13_fu_579_p2 <= "1" when (phi_ln13_1_reg_289 = ap_const_lv7_7F) else "0";
    icmp_ln26_fu_707_p2 <= "1" when (indvar_flatten11_reg_356 = ap_const_lv15_4000) else "0";
    icmp_ln28_fu_725_p2 <= "1" when (x_0_reg_378 = ap_const_lv8_80) else "0";
    icmp_ln32_1_fu_807_p2 <= "1" when (trunc_ln32_fu_797_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_fu_801_p2 <= "0" when (tmp_14_fu_787_p4 = ap_const_lv8_FF) else "1";
    icmp_ln54_fu_629_p2 <= "1" when (indvar_flatten_reg_323 = ap_const_lv15_4000) else "0";
    icmp_ln56_fu_647_p2 <= "1" when (x_0_i_reg_345 = ap_const_lv8_80) else "0";
    icmp_ln68_fu_825_p2 <= "1" when (indvar_flatten23_reg_413 = ap_const_lv15_4000) else "0";
    icmp_ln70_fu_843_p2 <= "1" when (x_0_i13_reg_435 = ap_const_lv8_80) else "0";
    isNeg_fu_948_p3 <= add_ln339_fu_942_p2(8 downto 8);
    mantissa_V_fu_924_p4 <= ((ap_const_lv1_1 & tmp_V_1_fu_920_p1) & ap_const_lv1_0);
    or_ln32_fu_813_p2 <= (icmp_ln32_fu_801_p2 or icmp_ln32_1_fu_807_p2);
    p_Val2_s_fu_898_p1 <= reg_548;
    r_V_1_fu_992_p2 <= std_logic_vector(shift_left(unsigned(zext_ln682_fu_934_p1),to_integer(unsigned('0' & zext_ln1287_fu_982_p1(31-1 downto 0)))));
    r_V_fu_986_p2 <= std_logic_vector(shift_right(unsigned(mantissa_V_fu_924_p4),to_integer(unsigned('0' & sext_ln1311_2_fu_978_p1(25-1 downto 0)))));
    select_ln1312_fu_1020_p3 <= 
        zext_ln59_fu_1006_p1 when (isNeg_fu_948_p3(0) = '1') else 
        tmp_19_fu_1010_p4;
    select_ln32_1_fu_739_p3 <= 
        y_fu_719_p2 when (icmp_ln28_fu_725_p2(0) = '1') else 
        ap_phi_mux_y_0_phi_fu_371_p4;
    select_ln32_fu_731_p3 <= 
        ap_const_lv8_0 when (icmp_ln28_fu_725_p2(0) = '1') else 
        x_0_reg_378;
    select_ln59_1_fu_653_p3 <= 
        ap_const_lv8_0 when (icmp_ln56_fu_647_p2(0) = '1') else 
        x_0_i_reg_345;
    select_ln59_2_fu_661_p3 <= 
        y_1_fu_641_p2 when (icmp_ln56_fu_647_p2(0) = '1') else 
        ap_phi_mux_y_0_i_phi_fu_338_p4;
    select_ln75_1_fu_857_p3 <= 
        y_2_fu_837_p2 when (icmp_ln70_fu_843_p2(0) = '1') else 
        ap_phi_mux_y_0_i12_phi_fu_428_p4;
    select_ln75_fu_849_p3 <= 
        ap_const_lv8_0 when (icmp_ln70_fu_843_p2(0) = '1') else 
        x_0_i13_reg_435;
        sext_ln1311_1_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_966_p3),32));

        sext_ln1311_2_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_966_p3),25));

        sext_ln1311_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1311_fu_956_p2),9));

    sub_ln1311_fu_956_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_V_fu_910_p4));
    sub_ln59_fu_1028_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(select_ln1312_reg_1315));
    tmp_14_fu_787_p4 <= bitcast_ln32_fu_784_p1(30 downto 23);
    tmp_16_fu_669_p3 <= (select_ln59_2_fu_661_p3 & ap_const_lv7_0);
    tmp_17_fu_747_p3 <= (select_ln32_1_fu_739_p3 & ap_const_lv7_0);
    tmp_18_fu_865_p3 <= (select_ln75_1_fu_857_p3 & ap_const_lv7_0);
    tmp_19_fu_1010_p4 <= r_V_1_fu_992_p2(31 downto 24);
    tmp_22_fu_603_p3 <= (phi_ln13_2_reg_300 & phi_ln13_3_reg_312);
    tmp_25_fu_998_p3 <= r_V_fu_986_p2(24 downto 24);

    tmp_M_imag_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln555_2_fu_691_p1, ap_CS_fsm_state32, ap_CS_fsm_state88, grp_fft_top_2D_fu_446_in_M_imag_address0, grp_fft_top_2D_fu_446_out_M_imag_address0, ap_block_pp0_stage0, zext_ln1027_fu_573_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            tmp_M_imag_address0 <= zext_ln555_2_fu_691_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tmp_M_imag_address0 <= zext_ln1027_fu_573_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            tmp_M_imag_address0 <= grp_fft_top_2D_fu_446_out_M_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            tmp_M_imag_address0 <= grp_fft_top_2D_fu_446_in_M_imag_address0;
        else 
            tmp_M_imag_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    tmp_M_imag_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state32, ap_CS_fsm_state88, grp_fft_top_2D_fu_446_in_M_imag_ce0, grp_fft_top_2D_fu_446_out_M_imag_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            tmp_M_imag_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            tmp_M_imag_ce0 <= grp_fft_top_2D_fu_446_out_M_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            tmp_M_imag_ce0 <= grp_fft_top_2D_fu_446_in_M_imag_ce0;
        else 
            tmp_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_M_imag_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state88, grp_fft_top_2D_fu_446_out_M_imag_d0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            tmp_M_imag_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            tmp_M_imag_d0 <= grp_fft_top_2D_fu_446_out_M_imag_d0;
        else 
            tmp_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tmp_M_imag_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln54_fu_629_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state88, grp_fft_top_2D_fu_446_out_M_imag_we0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln54_fu_629_p2 = ap_const_lv1_0)))) then 
            tmp_M_imag_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            tmp_M_imag_we0 <= grp_fft_top_2D_fu_446_out_M_imag_we0;
        else 
            tmp_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_M_real_address0_assign_proc : process(ap_CS_fsm_state3, zext_ln555_2_reg_1088_pp0_iter23_reg, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln321_5_fu_887_p1, ap_enable_reg_pp0_iter24, ap_CS_fsm_state32, ap_CS_fsm_state88, grp_fft_top_2D_fu_446_in_M_real_address0, grp_fft_top_2D_fu_446_out_M_real_address0, ap_block_pp0_stage0, ap_block_pp2_stage0, zext_ln1027_fu_573_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            tmp_M_real_address0 <= zext_ln321_5_fu_887_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            tmp_M_real_address0 <= zext_ln555_2_reg_1088_pp0_iter23_reg(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tmp_M_real_address0 <= zext_ln1027_fu_573_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            tmp_M_real_address0 <= grp_fft_top_2D_fu_446_out_M_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            tmp_M_real_address0 <= grp_fft_top_2D_fu_446_in_M_real_address0;
        else 
            tmp_M_real_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    tmp_M_real_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_state3, ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter24, ap_CS_fsm_state32, ap_CS_fsm_state88, grp_fft_top_2D_fu_446_in_M_real_ce0, grp_fft_top_2D_fu_446_out_M_real_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            tmp_M_real_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            tmp_M_real_ce0 <= grp_fft_top_2D_fu_446_out_M_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            tmp_M_real_ce0 <= grp_fft_top_2D_fu_446_in_M_real_ce0;
        else 
            tmp_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_M_real_d0_assign_proc : process(ap_CS_fsm_state3, p_r_assign_1_reg_1118, ap_enable_reg_pp0_iter24, ap_CS_fsm_state88, grp_fft_top_2D_fu_446_out_M_real_d0, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            tmp_M_real_d0 <= p_r_assign_1_reg_1118;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            tmp_M_real_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            tmp_M_real_d0 <= grp_fft_top_2D_fu_446_out_M_real_d0;
        else 
            tmp_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    tmp_M_real_we0_assign_proc : process(ap_CS_fsm_state3, ap_block_pp0_stage0_11001, icmp_ln54_reg_1074_pp0_iter23_reg, ap_enable_reg_pp0_iter24, ap_CS_fsm_state88, grp_fft_top_2D_fu_446_out_M_real_we0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (icmp_ln54_reg_1074_pp0_iter23_reg = ap_const_lv1_0)))) then 
            tmp_M_real_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            tmp_M_real_we0 <= grp_fft_top_2D_fu_446_out_M_real_we0;
        else 
            tmp_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_V_1_fu_920_p1 <= p_Val2_s_fu_898_p1(23 - 1 downto 0);
    tmp_V_fu_910_p4 <= p_Val2_s_fu_898_p1(30 downto 23);
    tmp_fu_565_p3 <= (phi_ln13_reg_277 & phi_ln13_1_reg_289);
    trunc_ln32_fu_797_p1 <= bitcast_ln32_fu_784_p1(23 - 1 downto 0);
    ush_fu_966_p3 <= 
        sext_ln1311_fu_962_p1 when (isNeg_fu_948_p3(0) = '1') else 
        add_ln339_fu_942_p2;
    x_1_fu_697_p2 <= std_logic_vector(unsigned(select_ln59_1_fu_653_p3) + unsigned(ap_const_lv8_1));
    x_2_fu_892_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(select_ln75_fu_849_p3));
    x_fu_778_p2 <= std_logic_vector(unsigned(select_ln32_fu_731_p3) + unsigned(ap_const_lv8_1));

    x_io_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln555_2_fu_691_p1, zext_ln321_5_reg_1290_pp2_iter10_reg, ap_enable_reg_pp2_iter11, ap_block_pp0_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            x_io_V_address0 <= zext_ln321_5_reg_1290_pp2_iter10_reg(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            x_io_V_address0 <= zext_ln555_2_fu_691_p1(14 - 1 downto 0);
        else 
            x_io_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    x_io_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp2_iter11)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp2_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            x_io_V_ce0 <= ap_const_logic_1;
        else 
            x_io_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_io_V_d0 <= 
        sub_ln59_fu_1028_p2 when (p_Result_s_reg_1310(0) = '1') else 
        select_ln1312_reg_1315;

    x_io_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln68_reg_1276_pp2_iter10_reg, ap_enable_reg_pp2_iter11)
    begin
        if (((ap_enable_reg_pp2_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln68_reg_1276_pp2_iter10_reg = ap_const_lv1_0))) then 
            x_io_V_we0 <= ap_const_logic_1;
        else 
            x_io_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    y_1_fu_641_p2 <= std_logic_vector(unsigned(ap_phi_mux_y_0_i_phi_fu_338_p4) + unsigned(ap_const_lv8_1));
    y_2_fu_837_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_y_0_i12_phi_fu_428_p4));
    y_fu_719_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_y_0_phi_fu_371_p4));
    zext_ln1027_1_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_603_p3),64));
    zext_ln1027_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_565_p3),64));
    zext_ln1044_1_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1044_fu_763_p2),64));
    zext_ln1044_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_fu_731_p3),16));
    zext_ln1287_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1311_1_fu_974_p1),79));
    zext_ln29_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_747_p3),16));
    zext_ln321_5_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_881_p2),64));
    zext_ln321_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln75_fu_849_p3),16));
    zext_ln339_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_fu_910_p4),9));
    zext_ln555_1_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln59_1_fu_653_p3),16));
    zext_ln555_2_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln555_fu_685_p2),64));
    zext_ln57_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_669_p3),16));
    zext_ln59_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_998_p3),8));
    zext_ln682_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_V_fu_924_p4),79));
    zext_ln71_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_865_p3),16));
end behav;
